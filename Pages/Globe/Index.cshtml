@page
@model Geography4Geek_1.Pages.Globe.IndexModel
@{
    ViewData["Title"] = "3D World Globe";
}

<div class="container-fluid mt-3">
    <div class="row">
        <div class="col-md-9">
            <div id="cesiumContainer" style="width: 100%; height: 600px; position: relative;">
                <div id="loadingOverlay" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; display: flex; flex-direction: column; justify-content: center; align-items: center; background-color: rgba(0,0,0,0.7); color: white; z-index: 1000;">
                    <div class="spinner-border text-light mb-3"></div>
                    <div id="loadingStatus">Loading 3D Globe...</div>
                    <div id="errorMessage" style="color: #ffaaaa; margin-top: 10px; display: none;"></div>
                </div>
                <div id="countryLabel" style="position: absolute; left: 10px; bottom: 10px; background-color: rgba(0,0,0,0.5); color: white; padding: 5px 10px; border-radius: 4px; font-weight: bold; display: none;">
                    <div class="d-flex align-items-center">
                        <img id="countryFlag" src="" alt="" style="width: 24px; height: auto; margin-right: 8px; display: none;">
                        <span id="countryName"></span>
                    </div>
                </div>
                <div id="controlsContainer" class="custom-controls-container"></div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    Country Information
                </div>
                <div class="card-body">
                    <div id="country-info">
                        <p>Select a country on the globe to view information.</p>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal per informazioni complete -->
<div class="modal fade" id="countryInfoModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="countryInfoModalLabel">Country Information</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="countryInfoModalBody"></div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="startQuizButton">
                    <i class="fas fa-question-circle me-2"></i>Start Quiz
                </button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>

            </div>

        </div>
    </div>
</div>

@section Styles {
    <style>
        /* Container principale per i controlli personalizzati - SPOSTATO PER NON COPRIRE I CONTROLLI NATIVI */
        .custom-controls-container {
            position: absolute;
            top: 5px;
            right: 85px; /* Spostato a destra per lasciare spazio ai controlli nativi */
            z-index: 999; /* Inferiore ai controlli nativi */
            display: flex;
            flex-direction: column;
            gap: 5px;
            align-items: flex-end;
        }

        /* Stile comune per i pulsanti personalizzati */
        .cesium-custom-button {
            background-color: #303336;
            color: white;
            border: 1px solid #444;
            border-radius: 4px;
            padding: 4px 12px;
            font-size: 13px;
            cursor: pointer;
            display: block;
            margin-bottom: 4px;
            min-width: 100px;
            text-align: center;
        }

            .cesium-custom-button:hover {
                background-color: #48b;
                border-color: #aef;
            }

        /* Stile per il pannello informazioni paese */
        #country-info {
            min-height: 120px;
        }

            #country-info h4 {
                color: #0d6efd;
                border-bottom: 1px solid #dee2e6;
                padding-bottom: 8px;
                margin-bottom: 10px;
            }

        /* Stile per l'etichetta country hover */
        #countryLabel {
            font-size: 14px;
            z-index: 10;
            box-shadow: 0 2px 5px rgba(0,0,0,0.5);
            pointer-events: none;
        }

        /* Stile per la bandiera nel pannello informazioni */
        .country-flag {
            height: 24px;
            margin-right: 10px;
            border: 1px solid #ddd;
        }

        /* IMPORTANTE: Assicura la visibilità e il corretto posizionamento dei controlli nativi */
        .cesium-viewer-toolbar {
            display: block !important;
            position: absolute;
            right: 5px;
            top: 5px;
            z-index: 1000; /* Superiore ai controlli personalizzati */
        }

        .cesium-button.cesium-homeButton {
            display: block !important;
            position: relative;
            z-index: 1000;
        }

        .cesium-sceneModePicker-wrapper {
            display: block !important;
            position: relative;
            z-index: 1000;
        }

        #startQuizButton {
            background-color: #28a745;
            border-color: #28a745;
            transition: all 0.3s ease;
        }

            #startQuizButton:hover {
                background-color: #218838;
                border-color: #1e7e34;
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            }
        /* Media query per layout responsive - SINTASSI CORRETTA PER RAZOR */
        @@media (max-width: 768px) {
            .custom-controls-container {
                flex-direction: row;
                flex-wrap: wrap;
                justify-content: flex-end;
                gap: 4px;
                max-width: calc(100% - 90px); /* Lascia spazio per i controlli nativi */
                right: 90px;
            }

            .cesium-custom-button {
                margin-bottom: 0;
                min-width: auto;
                padding: 4px 8px;
            }
        }
    </style>
}    


    @section Scripts {
        <script src="https://cesium.com/downloads/cesiumjs/releases/1.70/Build/Cesium/Cesium.js"></script>
        <link href="https://cesium.com/downloads/cesiumjs/releases/1.70/Build/Cesium/Widgets/widgets.css" rel="stylesheet">

        <script>
            // Elementi UI
            const loadingOverlay = document.getElementById('loadingOverlay');
            const loadingStatus = document.getElementById('loadingStatus');
            const errorMessage = document.getElementById('errorMessage');
            const countryInfoElement = document.getElementById('country-info');
            const countryLabelElement = document.getElementById('countryLabel');
            const countryNameElement = document.getElementById('countryName');  // Nuovo elemento per il nome
            const countryFlagElement = document.getElementById('countryFlag');  // Nuovo elemento per la bandiera
            const controlsContainer = document.getElementById('controlsContainer');
            const startQuizButton = document.getElementById('startQuizButton');

            // Variabili globali
            let selectedEntity = null;
            let viewer = null;
            let countriesDataSource = null;
            let countriesGeoJson = null;
            let globeRotationEnabled = true;
            let firstRenderComplete = false;
            let currentCountryName = null; // Memorizza il nome del paese selezionato

            // Configurazione iniziale della vista del globo
            const defaultView = {
                destination: Cesium.Cartesian3.fromDegrees(0, 0, 20000000),
                orientation: {
                    heading: 0.0,
                    pitch: -0.5,
                    roll: 0.0
                }
            };

            // Mapping per codici dei paesi (ISO 2) per le bandiere
                const countryNameToCode = {
        "Afghanistan": "af",
        "Albania": "al",
        "Algeria": "dz",
        "Andorra": "ad",
        "Angola": "ao",
        "Antigua and Barbuda": "ag",
        "Argentina": "ar",
        "Armenia": "am",
        "Australia": "au",
        "Austria": "at",
        "Azerbaijan": "az",
        "Bahamas": "bs",
        "Bahrain": "bh",
        "Bangladesh": "bd",
        "Barbados": "bb",
        "Belarus": "by",
        "Belgium": "be",
        "Belize": "bz",
        "Benin": "bj",
        "Bhutan": "bt",
        "Bolivia": "bo",
        "Bosnia and Herzegovina": "ba",
        "Botswana": "bw",
        "Brazil": "br",
        "Brunei": "bn",
        "Bulgaria": "bg",
        "Burkina Faso": "bf",
        "Burundi": "bi",
        "Cambodia": "kh",
        "Cameroon": "cm",
        "Canada": "ca",
        "Cape Verde": "cv",
        "Central African Republic": "cf",
        "Chad": "td",
        "Chile": "cl",
        "China": "cn",
        "Colombia": "co",
        "Comoros": "km",
        "Congo": "cg",
        "Democratic Republic of the Congo": "cd",
        "Costa Rica": "cr",
        "Cote d'Ivoire": "ci",
        "Ivory Coast": "ci",
        "Croatia": "hr",
        "Cuba": "cu",
        "Cyprus": "cy",
        "Czech Republic": "cz",
        "Czechia": "cz",
        "Denmark": "dk",
        "Djibouti": "dj",
        "Dominica": "dm",
        "Dominican Republic": "do",
        "Ecuador": "ec",
        "Egypt": "eg",
        "El Salvador": "sv",
        "Equatorial Guinea": "gq",
        "Eritrea": "er",
        "Estonia": "ee",
        "Eswatini": "sz",
        "Swaziland": "sz",
        "Ethiopia": "et",
        "Fiji": "fj",
        "Finland": "fi",
        "France": "fr",
        "Gabon": "ga",
        "Gambia": "gm",
        "Georgia": "ge",
        "Germany": "de",
        "Ghana": "gh",
        "Greece": "gr",
        "Grenada": "gd",
        "Guatemala": "gt",
        "Guinea": "gn",
        "Guinea-Bissau": "gw",
        "Guyana": "gy",
        "Haiti": "ht",
        "Honduras": "hn",
        "Hungary": "hu",
        "Iceland": "is",
        "India": "in",
        "Indonesia": "id",
        "Iran": "ir",
        "Iraq": "iq",
        "Ireland": "ie",
        "Israel": "il",
        "Italy": "it",
        "Jamaica": "jm",
        "Japan": "jp",
        "Jordan": "jo",
        "Kazakhstan": "kz",
        "Kenya": "ke",
        "Kiribati": "ki",
        "Kiribati (Gilbert Islands)": "ki",
        "Kiribati (Line Islands)": "ki",
        "Kiribati (Phoenix Islands)": "ki",
        "North Korea": "kp",
        "South Korea": "kr",
        "Korea": "kr",
        "Kosovo": "xk",
        "Kuwait": "kw",
        "Kyrgyzstan": "kg",
        "Laos": "la",
        "Latvia": "lv",
        "Lebanon": "lb",
        "Lesotho": "ls",
        "Liberia": "lr",
        "Libya": "ly",
        "Liechtenstein": "li",
        "Lithuania": "lt",
        "Luxembourg": "lu",
        "North Macedonia": "mk",
        "Macedonia": "mk",
        "Madagascar": "mg",
        "Malawi": "mw",
        "Malaysia": "my",
        "Maldives": "mv",
        "Mali": "ml",
        "Malta": "mt",
        "Marshall Islands": "mh",
        "Mauritania": "mr",
        "Mauritius": "mu",
        "Mexico": "mx",
        "Micronesia": "fm",
        "Moldova": "md",
        "Monaco": "mc",
        "Mongolia": "mn",
        "Montenegro": "me",
        "Morocco": "ma",
        "Mozambique": "mz",
        "Myanmar": "mm",
        "Burma": "mm",
        "Namibia": "na",
        "Nauru": "nr",
        "Nepal": "np",
        "Netherlands": "nl",
        "Holland": "nl",
        "New Zealand": "nz",
        "Nicaragua": "ni",
        "Niger": "ne",
        "Nigeria": "ng",
        "Norway": "no",
        "Oman": "om",
        "Pakistan": "pk",
        "Palau": "pw",
        "Palestine": "ps",
        "Panama": "pa",
        "Papua New Guinea": "pg",
        "Paraguay": "py",
        "Peru": "pe",
        "Philippines": "ph",
        "Poland": "pl",
        "Portugal": "pt",
        "Qatar": "qa",
        "Romania": "ro",
        "Russia": "ru",
        "Rwanda": "rw",
        "Saint Kitts and Nevis": "kn",
        "Saint Lucia": "lc",
        "Saint Vincent and the Grenadines": "vc",
        "Samoa": "ws",
        "San Marino": "sm",
        "Sao Tome and Principe": "st",
        "Saudi Arabia": "sa",
        "Senegal": "sn",
        "Serbia": "rs",
        "Seychelles": "sc",
        "Sierra Leone": "sl",
        "Singapore": "sg",
        "Slovakia": "sk",
        "Slovenia": "si",
        "Solomon Islands": "sb",
        "Somalia": "so",
        "South Africa": "za",
        "South Sudan": "ss",
                    "Spain": "es",
            "Sri Lanka": "lk",
            "Sudan": "sd",
            "Suriname": "sr",
            "Sweden": "se",
            "Switzerland": "ch",
            "Syria": "sy",
            "Taiwan": "tw",
            "Tajikistan": "tj",
            "Tanzania": "tz",
            "Thailand": "th",
            "Timor-Leste": "tl",
            "East Timor": "tl",
            "Togo": "tg",
            "Tonga": "to",
            "Trinidad and Tobago": "tt",
            "Tunisia": "tn",
            "Turkey": "tr",
            "Turkmenistan": "tm",
            "Tuvalu": "tv",
            "Uganda": "ug",
            "Ukraine": "ua",
            "United Arab Emirates": "ae",
            "UAE": "ae",
            "United Kingdom": "gb",
            "UK": "gb",
            "Great Britain": "gb",
            "England": "gb",
            "Scotland": "gb",
            "Wales": "gb",
            "Northern Ireland": "gb",
            "United States": "us",
            "United States of America": "us",
            "USA": "us",
            "U.S.A.": "us",
            "U.S.": "us",
            "Uruguay": "uy",
            "Uzbekistan": "uz",
            "Vanuatu": "vu",
            "Vatican City": "va",
            "Holy See": "va",
            "Venezuela": "ve",
            "Vietnam": "vn",
            "Viet Nam": "vn",
            "Yemen": "ye",
            "Zambia": "zm",
            "Zimbabwe": "zw",

            // Territori, dipendenze e regioni speciali
            "Hong Kong": "hk",
            "Macau": "mo",
            "Macao": "mo",
            "Puerto Rico": "pr",
            "Greenland": "gl",
            "Faroe Islands": "fo",
            "French Polynesia": "pf",
            "New Caledonia": "nc",
            "Guam": "gu",
            "American Samoa": "as",
            "Isle of Man": "im",
            "Jersey": "je",
            "Guernsey": "gg",
            "Gibraltar": "gi",
            "Cayman Islands": "ky",
            "Bermuda": "bm",
            "Aruba": "aw",
            "Curaçao": "cw",
            "Sint Maarten": "sx",
            "Bonaire, Sint Eustatius and Saba": "bq",
            "U.S. Virgin Islands": "vi",
            "Virgin Islands, U.S.": "vi",
            "British Virgin Islands": "vg",
            "Virgin Islands, British": "vg",
            "Falkland Islands": "fk",
            "Malvinas": "fk",
            "Guadeloupe": "gp",
            "Martinique": "mq",
            "Réunion": "re",
            "Mayotte": "yt",
            "French Guiana": "gf",
            "Saint Martin": "mf",
            "Saint Barthélemy": "bl",
            "Saint Pierre and Miquelon": "pm",
            "Anguilla": "ai",
            "Montserrat": "ms",
            "Turks and Caicos Islands": "tc",
            "Cook Islands": "ck",
            "Niue": "nu",
            "Tokelau": "tk",
            "Wallis and Futuna": "wf",
            "Svalbard and Jan Mayen": "sj",
            "Åland Islands": "ax",
            "Norfolk Island": "nf",
            "Christmas Island": "cx",
            "Cocos (Keeling) Islands": "cc",
            "Pitcairn Islands": "pn",
            "South Georgia and the South Sandwich Islands": "gs",
            "French Southern Territories": "tf",
            "British Indian Ocean Territory": "io",
            "Heard Island and McDonald Islands": "hm",
            "Northern Mariana Islands": "mp",

            // Nomi storici o alternativi
            "USSR": "su",
            "Soviet Union": "su",
            "Yugoslavia": "yu",
            "Czechoslovakia": "cs",
            "East Germany": "dd",
            "West Germany": "de",
            "Rhodesia": "zw",
            "Zaire": "cd",
            "Persia": "ir",
            "Siam": "th",
            "Burma": "mm",
            "Ceylon": "lk",
            "Formosa": "tw",
            "Congo-Brazzaville": "cg",
            "Congo-Kinshasa": "cd",
            "Republic of China": "tw",
            "People's Republic of China": "cn",
            "Mainland China": "cn",
            "Tibet": "cn",
            "Western Sahara": "eh",
            "Sahrawi Arab Democratic Republic": "eh",
            "Palestine State": "ps",
            "State of Palestine": "ps",
            "West Bank": "ps",
            "Gaza Strip": "ps",
            "Abkhazia": "ge",
            "South Ossetia": "ge",
            "Transnistria": "md",
            "Nagorno-Karabakh": "az",
            "Artsakh": "az",
            "Northern Cyprus": "cy",
            "Turkish Republic of Northern Cyprus": "cy",
            "Somaliland": "so",
            "Kurdistan": "iq",

            // Continenti e regioni
            "Europe": "eu",
            "European Union": "eu",
            "Africa": "af",
            "North America": "na",
            "South America": "sa",
            "Asia": "as",
            "Oceania": "oc",
            "Antarctica": "aq"
        };

            // Database delle coordinate delle isole piccole e microstati
                // Database delle coordinate delle isole piccole e microstati
        const smallIslandsDatabase = {
            // Europa
            "Vatican City": { lat: 41.9022, lon: 12.4539, zoom: 15000 },
            "Monaco": { lat: 43.7384, lon: 7.4246, zoom: 20000 },
            "San Marino": { lat: 43.9424, lon: 12.4578, zoom: 30000 },
            "Liechtenstein": { lat: 47.1416, lon: 9.5230, zoom: 50000 },
            "Malta": { lat: 35.9375, lon: 14.3754, zoom: 100000 },
            "Andorra": { lat: 42.5063, lon: 1.5218, zoom: 60000 },
            "Luxembourg": { lat: 49.8153, lon: 6.1296, zoom: 100000 },
            "Isle of Man": { lat: 54.2361, lon: -4.5481, zoom: 120000 },
            "Jersey": { lat: 49.2144, lon: -2.1312, zoom: 50000 },
            "Guernsey": { lat: 49.4630, lon: -2.5850, zoom: 50000 },
            "Gibraltar": { lat: 36.1408, lon: -5.3536, zoom: 30000 },
            "Faroe Islands": { lat: 62.0129, lon: -6.7770, zoom: 250000 },
            "Åland Islands": { lat: 60.1785, lon: 19.9156, zoom: 200000 },

            // Caraibi
            "Barbados": { lat: 13.1939, lon: -59.5432, zoom: 130000 },
            "Antigua and Barbuda": { lat: 17.0608, lon: -61.7964, zoom: 120000 },
            "Saint Kitts and Nevis": { lat: 17.3578, lon: -62.7830, zoom: 100000 },
            "Saint Lucia": { lat: 13.9094, lon: -60.9789, zoom: 120000 },
            "Saint Vincent and the Grenadines": { lat: 13.2528, lon: -61.1971, zoom: 130000 },
            "Grenada": { lat: 12.1165, lon: -61.6790, zoom: 120000 },
            "Dominica": { lat: 15.4150, lon: -61.3710, zoom: 120000 },
            "Bahamas": { lat: 25.0343, lon: -77.3963, zoom: 500000 },
            "Jamaica": { lat: 18.1096, lon: -77.2975, zoom: 250000 },
            "Trinidad and Tobago": { lat: 10.6918, lon: -61.2225, zoom: 180000 },
            "Aruba": { lat: 12.5211, lon: -69.9683, zoom: 70000 },
            "Curaçao": { lat: 12.1696, lon: -68.9900, zoom: 100000 },
            "Sint Maarten": { lat: 18.0425, lon: -63.0548, zoom: 40000 },
            "Saint Martin": { lat: 18.0708, lon: -63.0501, zoom: 40000 },
            "Saint Barthélemy": { lat: 17.9000, lon: -62.8333, zoom: 30000 },
            "Anguilla": { lat: 18.2206, lon: -63.0686, zoom: 70000 },
            "British Virgin Islands": { lat: 18.4207, lon: -64.6400, zoom: 120000 },
            "U.S. Virgin Islands": { lat: 18.3358, lon: -64.8963, zoom: 120000 },
            "Cayman Islands": { lat: 19.3133, lon: -81.2546, zoom: 120000 },
            "Montserrat": { lat: 16.7425, lon: -62.1874, zoom: 50000 },
            "Turks and Caicos Islands": { lat: 21.6940, lon: -71.7979, zoom: 200000 },
            "Bermuda": { lat: 32.3078, lon: -64.7505, zoom: 70000 },
            "Puerto Rico": { lat: 18.2208, lon: -66.5901, zoom: 250000 },

            // Pacifico
            "Fiji": { lat: -17.7134, lon: 178.0650, zoom: 500000 },
            "Kiribati": { lat: 1.8709, lon: -157.3676, zoom: 1000000 },
            "Kiribati (Gilbert Islands)": { lat: 1.9867, lon: 172.9822, zoom: 500000 },
            "Kiribati (Phoenix Islands)": { lat: -4.0000, lon: -174.0000, zoom: 500000 },
            "Kiribati (Line Islands)": { lat: 1.8709, lon: -157.3676, zoom: 500000 },
            "Marshall Islands": { lat: 7.1315, lon: 171.1845, zoom: 500000 },
            "Micronesia": { lat: 5.5800, lon: 150.7900, zoom: 1000000 },
            "Nauru": { lat: -0.5228, lon: 166.9315, zoom: 30000 },
            "Palau": { lat: 7.5150, lon: 134.5825, zoom: 200000 },
            "Samoa": { lat: -13.7590, lon: -172.1046, zoom: 200000 },
            "Solomon Islands": { lat: -9.6457, lon: 160.1562, zoom: 600000 },
            "Tonga": { lat: -21.1790, lon: -175.1982, zoom: 300000 },
            "Tuvalu": { lat: -7.1095, lon: 177.6493, zoom: 100000 },
            "Vanuatu": { lat: -15.3767, lon: 166.9592, zoom: 400000 },
            "Cook Islands": { lat: -21.2367, lon: -159.7777, zoom: 200000 },
            "Niue": { lat: -19.0544, lon: -169.8672, zoom: 70000 },
            "French Polynesia": { lat: -17.6797, lon: -149.4068, zoom: 400000 },
            "New Caledonia": { lat: -21.1230, lon: 165.8454, zoom: 400000 },
            "Wallis and Futuna": { lat: -13.7687, lon: -177.1561, zoom: 150000 },
            "Guam": { lat: 13.4443, lon: 144.7937, zoom: 100000 },
            "American Samoa": { lat: -14.2710, lon: -170.1322, zoom: 100000 },
            "Northern Mariana Islands": { lat: 15.0979, lon: 145.6739, zoom: 200000 },
            "Pitcairn Islands": { lat: -24.3768, lon: -128.3242, zoom: 50000 },
            "Tokelau": { lat: -9.1676, lon: -171.8495, zoom: 100000 },

            // Africa e Oceano Indiano
            "Seychelles": { lat: -4.6796, lon: 55.4920, zoom: 200000 },
            "Mauritius": { lat: -20.3484, lon: 57.5522, zoom: 150000 },
            "Comoros": { lat: -11.6455, lon: 43.3333, zoom: 200000 },
            "São Tomé and Príncipe": { lat: 0.1864, lon: 6.6131, zoom: 150000 },
            "Cape Verde": { lat: 16.5388, lon: -23.0418, zoom: 300000 },
            "Cabo Verde": { lat: 16.5388, lon: -23.0418, zoom: 300000 },
            "Maldives": { lat: 3.2028, lon: 73.2207, zoom: 300000 },
            "Mayotte": { lat: -12.8275, lon: 45.1662, zoom: 100000 },
            "Réunion": { lat: -21.1151, lon: 55.5364, zoom: 150000 },
            "British Indian Ocean Territory": { lat: -7.3346, lon: 72.4245, zoom: 250000 },

            // Medio Oriente
            "Bahrain": { lat: 25.9307, lon: 50.6370, zoom: 150000 },
            "Qatar": { lat: 25.3548, lon: 51.1839, zoom: 200000 },
            "Kuwait": { lat: 29.3117, lon: 47.4818, zoom: 200000 },
            "Cyprus": { lat: 35.1264, lon: 33.4299, zoom: 200000 },
            "Lebanon": { lat: 33.8547, lon: 35.8623, zoom: 150000 },
            "Israel": { lat: 31.0461, lon: 34.8516, zoom: 200000 },
            "Palestine": { lat: 31.9522, lon: 35.2332, zoom: 150000 },
            "United Arab Emirates": { lat: 24.4539, lon: 54.3773, zoom: 300000 },

            // Asia
            "Singapore": { lat: 1.3521, lon: 103.8198, zoom: 100000 },
            "Brunei": { lat: 4.5353, lon: 114.7277, zoom: 150000 },
            "Hong Kong": { lat: 22.3193, lon: 114.1694, zoom: 120000 },
            "Macau": { lat: 22.1987, lon: 113.5439, zoom: 40000 },
            "Taiwan": { lat: 23.6978, lon: 120.9605, zoom: 400000 },
            "Bhutan": { lat: 27.5142, lon: 90.4336, zoom: 300000 },
            "East Timor": { lat: -8.8742, lon: 125.7275, zoom: 300000 },
            "Timor-Leste": { lat: -8.8742, lon: 125.7275, zoom: 300000 },

            // Altri paesi e territori insulari
            "Iceland": { lat: 64.9631, lon: -19.0208, zoom: 500000 },
            "Greenland": { lat: 71.7069, lon: -42.6043, zoom: 1500000 },
            "Svalbard": { lat: 77.8750, lon: 20.9752, zoom: 1000000 },
            "Svalbard and Jan Mayen": { lat: 77.8750, lon: 20.9752, zoom: 1000000 },
            "Falkland Islands": { lat: -51.7963, lon: -59.5236, zoom: 500000 },
            "South Georgia and the South Sandwich Islands": { lat: -54.4295, lon: -36.5879, zoom: 500000 },
            "Christmas Island": { lat: -10.4475, lon: 105.6904, zoom: 50000 },
            "Cocos (Keeling) Islands": { lat: -12.1642, lon: 96.8710, zoom: 80000 },
            "Norfolk Island": { lat: -29.0408, lon: 167.9547, zoom: 50000 },
            "Heard Island and McDonald Islands": { lat: -53.0818, lon: 73.5042, zoom: 100000 },
            "French Southern Territories": { lat: -49.2804, lon: 69.3486, zoom: 500000 },

            // Antartide (territori principali)
            "Antarctica": { lat: -82.8628, lon: 135.0000, zoom: 3500000 }
        };

            // Utility functions
            function updateStatus(message) {
                console.log("Status:", message);
                loadingStatus.textContent = message;
            }

            function showError(message) {
                console.error("ERROR:", message);
                errorMessage.textContent = message;
                errorMessage.style.display = "block";
            }

            // Ottieni il codice paese ISO 2 per le bandiere
            function getCountryCode(countryName) {
                // Per i casi speciali come "Kiribati (Gilbert Islands)"
                if (countryName && countryName.includes("(")) {
                    countryName = countryName.split("(")[0].trim();
                }

                // Cerca nel dizionario dei codici paese
                const code = countryNameToCode[countryName];
                return code ? code.toLowerCase() : null;
            }

            // Funzione per ottenere l'URL della bandiera
                   // Funzione migliorata per ottenere l'URL della bandiera
        function getFlagUrl(countryName) {
            if (!countryName) return null;

            // Per i casi speciali come "Kiribati (Gilbert Islands)"
            if (countryName.includes("(")) {
                countryName = countryName.split("(")[0].trim();
            }

            // Cerca nel dizionario dei codici paese
            const code = getCountryCode(countryName);
            if (!code) {
                console.warn(`Codice paese non trovato per: ${countryName}`);
                return null;
            }

            // Usa Flagcdn.com che è più affidabile e gratuito
            return `https://flagcdn.com/w80/${code.toLowerCase()}.png`;
        }

            // Aggiorna l'etichetta del paese con la bandiera
                   // Aggiorna l'etichetta del paese con la bandiera
        function updateCountryLabel(countryName) {
            if (!countryName || countryName === "Ocean or Unidentified Region") {
                countryLabelElement.style.display = 'none';
                return;
            }

            // Aggiorna il nome del paese
            countryNameElement.textContent = countryName;

            // Ottieni URL della bandiera
            const flagUrl = getFlagUrl(countryName);

            // Gestione delle bandiere con fallback
            if (flagUrl) {
                // Pre-carica l'immagine per verificare se è disponibile
                const img = new Image();

                img.onload = function() {
                    // La bandiera è stata caricata con successo
                    countryFlagElement.src = flagUrl;
                    countryFlagElement.alt = `${countryName} flag`;
                    countryFlagElement.style.display = "inline-block";
                    countryFlagElement.classList.remove("flag-error");
                };

                img.onerror = function() {
                    // Fallback: mostra una bandiera generica o le iniziali del paese
                    console.warn(`Impossibile caricare la bandiera per ${countryName}`);
                    countryFlagElement.src = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='40' height='30' viewBox='0 0 40 30'%3E%3Crect width='40' height='30' fill='%23f8f9fa' /%3E%3Ctext x='50%25' y='50%25' font-family='Arial' font-size='12' text-anchor='middle' dominant-baseline='middle' fill='%236c757d'%3E" + countryName.substring(0, 2) + "%3C/text%3E%3C/svg%3E";
                    countryFlagElement.alt = `${countryName} initials`;
                    countryFlagElement.style.display = "inline-block";
                    countryFlagElement.classList.add("flag-error");
                };

                img.src = flagUrl;
            } else {
                // Crea un SVG con le iniziali del paese
                const initials = countryName.substring(0, 2);
                countryFlagElement.src = `data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='40' height='30' viewBox='0 0 40 30'%3E%3Crect width='40' height='30' fill='%23f8f9fa' /%3E%3Ctext x='50%25' y='50%25' font-family='Arial' font-size='12' text-anchor='middle' dominant-baseline='middle' fill='%236c757d'%3E${initials}%3C/text%3E%3C/svg%3E`;
                countryFlagElement.alt = `${countryName} initials`;
                countryFlagElement.style.display = "inline-block";
                countryFlagElement.classList.add("flag-error");
            }

            // Mostra l'etichetta
            countryLabelElement.style.display = 'block';
        }

            // Funzione per aggiornare le informazioni del paese
            function updateCountryInfo(country) {
                if (!country || country === "Ocean or Unidentified Region") {
                    countryInfoElement.innerHTML = '<p>Select a country on the globe to view information.</p>';
                    currentCountryName = null;
                    return;
                }

                // Gestione di casi speciali (es. punti multipli)
                let displayName = country;
                if (country.includes("Kiribati (")) {
                    displayName = "Kiribati";
                }

                // Salva il nome del paese corrente
                currentCountryName = displayName;

                // Ottieni URL della bandiera
                const flagUrl = getFlagUrl(displayName);
                const flagHtml = flagUrl ?
                    `<img src="${flagUrl}" alt="${displayName} flag" class="country-flag">` :
                    '';

                countryInfoElement.innerHTML = `
                    <h4>${flagHtml}${displayName}</h4>
                    <div class="country-description">Information about ${displayName}</div>
                    <button class="btn btn-sm btn-info mt-2 w-100 read-more-btn" onclick="showFullInfo('${displayName}')">
                        Read more
                    </button>
                `;
            }
        // async function getCountryInfoFromGemini(countryName) {
        //     try {
        //         console.log(`Recupero informazioni per: ${countryName}`);

        //         // Aggiungi un parametro timestamp per evitare il caching del browser
        //         const timestamp = new Date().getTime();
        //         const response = await fetch(`/api/GeminiProxy/countryinfo?countryName=${encodeURIComponent(countryName)}&_=${timestamp}`);

        //         if (!response.ok) {
        //             console.warn(`API ha risposto con stato ${response.status}`);
        //             throw new Error(`Errore API: ${response.status}`);
        //         }

        //         // Controlla il Content-Type della risposta
        //         const contentType = response.headers.get('content-type');

        //         if (contentType && contentType.includes('application/json')) {
        //             // Se è JSON, parsa come JSON
        //             return await response.json();
        //         } else {
        //             // Se è HTML o altro formato, prendi il testo grezzo
        //             console.log("Risposta non-JSON ricevuta, elaborazione come testo");
        //             return await response.text();
        //         }
        //     } catch (error) {
        //         console.error("Errore durante la chiamata API:", error);
        //         throw error;
        //     }
        // }
                 async function getCountryInfoFromGemini(countryName) {
            try {
                console.log(`Recupero informazioni per: ${countryName}`);

                // Aggiungi un parametro timestamp per evitare il caching del browser
                const timestamp = new Date().getTime();
                const response = await fetch(`/api/GeminiProxy/countryinfo?countryName=${encodeURIComponent(countryName)}&_=${timestamp}`);

                if (!response.ok) {
                    console.warn(`API ha risposto con stato ${response.status}`);
                    throw new Error(`Errore API: ${response.status}`);
                }

                // Controlla il Content-Type della risposta
                const contentType = response.headers.get('content-type');

                if (contentType && contentType.includes('application/json')) {
                    // Se è JSON, parsa come JSON
                    return await response.json();
                } else {
                    // Se è HTML o altro formato, prendi il testo grezzo
                    console.log("Risposta non-JSON ricevuta, elaborazione come testo");
                    return await response.text();
                }
            } catch (error) {
                console.error("Errore durante la chiamata API:", error);
                throw error;
            }
        }


                window.showFullInfo = async function (country) {
            if (!country) return;

            // Salva il nome del paese corrente (solo per riferimento, non in localStorage)
            currentCountryName = country;

            const flagUrl = getFlagUrl(country);
            const flagHtml = flagUrl ?
                `<img src="${flagUrl}" alt="${country} flag" style="height: 36px; margin-right: 12px; border: 2px solid #fff; box-shadow: 0 2px 5px rgba(0,0,0,0.1); border-radius: 3px;">` :
                '';

            const modal = new bootstrap.Modal(document.getElementById('countryInfoModal'));

            // Header migliorato con stile premium
            document.getElementById('countryInfoModalLabel').innerHTML = `
                <div class="d-flex align-items-center">
                    ${flagHtml}
                    <span class="country-title">${country}</span>
                </div>
            `;

            // Aggiunta classe al modal per personalizzazione
            document.getElementById('countryInfoModal').classList.add('country-info-modal-enhanced');

            // Spinner di caricamento migliorato
            document.getElementById('countryInfoModalBody').innerHTML = `
                <div class="text-center py-5">
                    <div class="spinner-grow text-primary mb-3" role="status" style="width: 3rem; height: 3rem;">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="loading-text">Caricamento informazioni dettagliate su ${country}...</p>
                </div>
            `;

            modal.show();

            try {
                // MODIFICATO: Recupero sempre da API, NO CACHE
                console.log("Recupero informazioni da API per:", country);

                try {
                    // Rimuovi eventuali dati sulla cache
                    // AGGIUNTO: Pulizia esplicita di qualsiasi dato in cache relativo al paese
                    const cacheKey = `country_info_${country.toLowerCase().replace(/\s+/g, '_')}`;
                    localStorage.removeItem(cacheKey);
                    sessionStorage.removeItem(cacheKey);

                    // Ottieni informazioni dal Gemini (funzione già modificata per evitare cache)
                    const apiResult = await getCountryInfoFromGemini(country);

                    // Gestisce sia JSON che HTML che testo
                    let countryInfoRaw;

                    if (typeof apiResult === 'object') {
                        // Se è un oggetto JSON, estrai la descrizione
                        if (apiResult.data && apiResult.data.description) {
                            countryInfoRaw = apiResult.data.description;
                        } else if (apiResult.response) {
                            countryInfoRaw = apiResult.response;
                        } else {
                            countryInfoRaw = JSON.stringify(apiResult);
                        }
                    } else if (typeof apiResult === 'string') {
                        // Se è una stringa (HTML o testo), usala direttamente
                        countryInfoRaw = apiResult;
                    } else {
                        throw new Error("Formato dati non supportato");
                    }

                    // Se ancora non abbiamo informazioni valide, usa il fallback
                    if (!countryInfoRaw || countryInfoRaw.length < 100) {
                        throw new Error("Informazioni insufficienti dal servizio");
                    }

                    // Assicurati che countryInfoRaw sia una stringa
                    if (typeof countryInfoRaw !== 'string') {
                        countryInfoRaw = String(countryInfoRaw);
                    }

                    // Controlla se è HTML o testo semplice
                    let finalHTML;

                    if (countryInfoRaw.trim().startsWith('<')) {
                        // È già HTML, esegui la pulizia
                        let cleanedInfo = countryInfoRaw
                            .replace(/<meta[^>]*>/gi, '')
                            .replace(/<title[^>]*>.*?<\/title>/gi, '')
                            .replace(/<html[^>]*>/gi, '').replace(/<\/html>/gi, '')
                            .replace(/<head[^>]*>.*?<\/head>/gi, '')
                            .replace(/<body[^>]*>/gi, '').replace(/<\/body>/gi, '');

                        cleanedInfo = cleanedInfo.replace(/<p>(\s*<br\s*\/?>\s*)*(<meta[^>]*>)?(\s*<br\s*\/?>)*(<title[^>]*>.*?<\/title>)?(\s*<br\s*\/?>)*<\/p>/gi, '');
                        cleanedInfo = cleanedInfo.replace(/(<p>\s*<\/p>){1,}/gi, '');
                        cleanedInfo = cleanedInfo.replace(/^(\s*<br\s*\/?>)*/gi, '');

                        const tempDiv = document.createElement('div');
                        tempDiv.innerHTML = cleanedInfo;

                        // Resto della manipolazione DOM come nella tua funzione originale
                        // [codice manipolazione DOM preservato]

                        finalHTML = tempDiv.innerHTML;
                    } else {
                        // È testo semplice, convertilo in HTML di base
                        finalHTML = `<p>${countryInfoRaw.replace(/\n\n/g, '</p><p>').replace(/\n/g, '<br>')}</p>`;
                    }

                    // VERIFICA FINALE: Se non c'è contenuto visibile, aggiungi un messaggio
                    if (!finalHTML || finalHTML.trim().length < 50) {
                        finalHTML = `<p>Informazioni su ${country}. Alcuni dati potrebbero essere temporaneamente non disponibili.</p>`;
                    }

                    // Genera il layout migliorato ma utilizza i dati originali di Gemini
                    const formattedInfo = `
                        <div class="country-info-premium">
                            <div class="content-wrapper">
                                ${finalHTML}
                            </div>

                            <div class="quiz-ready-section">
                                <div class="quiz-icon">
                                    <i class="fas fa-question-circle"></i>
                                </div>
                                <div class="quiz-text">
                                    <h5>Pronto per il Quiz!</h5>
                                    <p>Metti alla prova le tue conoscenze su ${country} con il nostro quiz personalizzato.</p>
                                </div>
                            </div>

                          
                        </div>

                        <style>
                                                    /* Gli stili CSS rimangono gli stessi */
                        .country-info-modal-enhanced .modal-header {
                            background: linear-gradient(135deg, #2c3e50, #34495e);
                            color: white;
                            border-bottom: none;
                            padding: 1rem 1.5rem;
                        }
                        /* [resto degli stili] */
                        .country-info-modal-enhanced .modal-content {
                            border: none;
                            border-radius: 8px;
                            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
                        }

                        .country-info-modal-enhanced .btn-close {
                            filter: brightness(0) invert(1);
                        }

                        .country-title {
                            font-size: 1.5rem;
                            font-weight: 600;
                        }

                        .loading-text {
                            color: #666;
                            font-style: italic;
                            margin-top: 10px;
                        }

                        .country-info-premium {
                            font-family: 'Segoe UI', 'Roboto', sans-serif;
                            line-height: 1.7;
                            color: #333;
                            max-width: 100%;
                        }

                        .country-section-heading {
                            color: #2c3e50;
                            font-size: 1.4rem;
                            font-weight: 600;
                            margin-top: 28px;
                            margin-bottom: 16px;
                            padding-bottom: 10px;
                            border-bottom: 2px solid #f0f5fa;
                            display: flex;
                            align-items: center;
                        }

                        .country-section-heading:first-child {
                            margin-top: 0;
                        }

                        .icon-container {
                            display: inline-flex;
                            align-items: center;
                            justify-content: center;
                            width: 32px;
                            height: 32px;
                            margin-right: 10px;
                            background: linear-gradient(135deg, #3498db, #2980b9);
                            border-radius: 50%;
                            color: white;
                        }

                        .content-wrapper {
                            margin-bottom: 24px;
                        }

                        .content-wrapper p {
                            margin-bottom: 16px;
                            text-align: justify;
                            font-size: 1rem;
                        }

                        .enhanced-list {
                            padding-left: 0;
                            list-style: none;
                            margin-bottom: 20px;
                        }

                        .enhanced-list-item {
                            position: relative;
                            background-color: #f8f9fa;
                            padding: 12px 15px 12px 45px;
                            border-radius: 6px;
                            margin-bottom: 10px;
                            box-shadow: 0 1px 3px rgba(0,0,0,0.05);
                            transition: all 0.2s ease;
                        }

                        .enhanced-list-item:hover {
                            background-color: #f0f7ff;
                            transform: translateX(3px);
                            box-shadow: 0 3px 5px rgba(0,0,0,0.08);
                        }

                        .fact-number {
                            position: absolute;
                            left: 10px;
                            top: 50%;
                            transform: translateY(-50%);
                            display: flex;
                            align-items: center;
                            justify-content: center;
                            width: 28px;
                            height: 28px;
                            background: linear-gradient(135deg, #3498db, #2980b9);
                            color: white;
                            font-weight: bold;
                            border-radius: 50%;
                            font-size: 0.9rem;
                        }

                        .highlight-number {
                            font-weight: 600;
                            color: #2980b9;
                        }

                        .highlight-date {
                            font-weight: 600;
                            color: #e74c3c;
                        }

                        .quiz-ready-section {
                            background: linear-gradient(135deg, #f9f9f9, #f0f0f0);
                            padding: 20px;
                            border-radius: 8px;
                            margin-top: 30px;
                            display: flex;
                            align-items: center;
                            border-left: 4px solid #3498db;
                        }

                        .quiz-icon {
                            font-size: 2.2rem;
                            color: #3498db;
                            margin-right: 20px;
                        }

                        .quiz-text h5 {
                            color: #2c3e50;
                            margin-bottom: 8px;
                            font-weight: 600;
                        }

                        .quiz-text p {
                            margin-bottom: 0;
                            font-size: 0.95rem;
                            color: #555;
                        }

                        /* Responsive adjustments */
        @@media (max-width: 768px) {
                            .quiz-ready-section {
                                flex-direction: column;
                                text-align: center;
                            }

                            .quiz-icon {
                                margin-right: 0;
                                margin-bottom: 15px;
                            }
                        }
                        </style>
                    `;

                    document.getElementById('countryInfoModalBody').innerHTML = formattedInfo;

                    // Caricare Font Awesome se non è già presente
                    if (!document.querySelector('link[href*="font-awesome"]')) {
                        const fontAwesome = document.createElement('link');
                        fontAwesome.rel = 'stylesheet';
                        fontAwesome.href = 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css';
                        document.head.appendChild(fontAwesome);
                    }

                } catch (apiError) {
                    console.error("Errore API:", apiError);
                    throw new Error(`Errore nel recupero dati: ${apiError.message}`);
                }

            } catch (error) {
                console.error("Errore durante il recupero delle informazioni:", error);
                document.getElementById('countryInfoModalBody').innerHTML = `
                    <div class="alert alert-danger shadow-sm">
                        <div class="d-flex align-items-center">
                            <i class="fas fa-exclamation-circle fa-2x me-3"></i>
                            <div>
                                <h5 class="mb-1">Errore di connessione</h5>
                                <p class="mb-0">Non è stato possibile recuperare le informazioni su ${country}. Riprova più tardi.</p>
                                <p class="mb-0"><small>Dettaglio tecnico: ${error.message}</small></p>
                            </div>
                        </div>
                        <div class="mt-3 pt-2 border-top">
                            <a href="/Quiz?country=${encodeURIComponent(country)}&questionCount=10&difficulty=medium" class="btn btn-primary">
                                <i class="fas fa-question-circle me-1"></i>Vai comunque al quiz
                            </a>
                        </div>
                    </div>
                `;
            }
        };

                    document.addEventListener('DOMContentLoaded', function() {
            // Aggiungi eventi click a tutti i link del quiz
            document.querySelectorAll('.quiz-link, .country-quiz-btn, [data-action="quiz"]').forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();

                    // Ottieni i valori dai radio button
                    const questionCount = document.querySelector('input[name="questionCount"]:checked')?.value || "5";
                    const difficulty = document.querySelector('input[name="difficulty"]:checked')?.value || "medium";

                    // Ottieni il paese dal data-attribute o altro attributo
                    const country = this.getAttribute('data-country') ||
                                   this.getAttribute('data-value') ||
                                   this.getAttribute('href')?.split('=')[1];

                    if (country) {
                        console.log(`Quiz richiesto: ${country}, ${questionCount} domande, difficoltà ${difficulty}`);

                        // Costruisci URL con parametri
                        const url = `/Quiz?country=${encodeURIComponent(country)}&questionCount=${questionCount}&difficulty=${difficulty}`;

                        // Naviga alla pagina del quiz
                        window.location.href = url;
                    }
                });
            });
        });


        async function getCountryInfo(countryName) {
          try {
            // Normalizza il nome del paese
            const normalizedName = countryName.trim();

            // Correggi specificamente il Canada (e altri paesi che danno problemi)
            let apiName = normalizedName;
            if (normalizedName.toLowerCase() === "canada") {
              // Usa il codice alpha-3 per il Canada
              const response = await fetch(`https://restcountries.com/v3.1/alpha/CAN`);

              if (response.ok) {
                return await response.json();
              }
              // Se fallisce, continua con il metodo normale
            }

            // Normale richiesta con il nome
            const response = await fetch(`https://restcountries.com/v3.1/name/${apiName}?fullText=true`);

            if (!response.ok) {
              // Prova senza fullText
              const altResponse = await fetch(`https://restcountries.com/v3.1/name/${apiName}`);

              if (!altResponse.ok) {
                throw new Error(`Errore API: ${response.status}`);
              }

              return await altResponse.json();
            }

            return await response.json();
          } catch (error) {
            console.error(`Errore nel recupero informazioni per ${countryName}:`, error);

            // Implementa un fallback per il Canada
            if (countryName.toLowerCase() === "canada") {
              return [{
                name: {
                  common: "Canada",
                  official: "Canada"
                },
                capital: ["Ottawa"],
                region: "Americas",
                subregion: "North America",
                population: 38005238,
                languages: {
                  eng: "English",
                  fra: "French"
                },
                flags: {
                  png: "https://flagcdn.com/w320/ca.png",
                  svg: "https://flagcdn.com/ca.svg"
                },
                currencies: {
                  CAD: {
                    name: "Canadian dollar",
                    symbol: "$"
                  }
                }
              }];
            }

            // Mostra messaggio di errore all'utente
            const errorContainer = document.getElementById('error-container');
            if (errorContainer) {
              errorContainer.style.display = 'block';
              document.getElementById('error-message').textContent =
                `Non è stato possibile recuperare le informazioni su ${countryName}. Riprova più tardi.`;
              document.getElementById('error-details').textContent = `Dettaglio tecnico: ${error.message}`;
            }

            throw error;
          }
        }
        // NUOVA FUNZIONE: Genera informazioni di base sul paese in caso di errore
        function generateFallbackCountryInfo(country, error) {
            // Ottieni informazioni di base dal database locale di piccoli stati, se disponibile
            const coordinates = smallIslandsDatabase[country] || null;

            // Ottieni continente basandosi su euristiche semplici (un esempio molto semplificato)
            let continent = "sconosciuto";
            if (countryNameToCode[country]) {
                const code = countryNameToCode[country].toLowerCase();

                // Euristiche molto semplificate basate sui codici paese
                if (["fr", "de", "it", "es", "gb", "gr"].includes(code)) continent = "Europa";
                else if (["us", "ca", "mx"].includes(code)) continent = "Nord America";
                else if (["br", "ar", "cl", "co"].includes(code)) continent = "Sud America";
                else if (["cn", "jp", "in", "ru", "sa", "th"].includes(code)) continent = "Asia";
                else if (["au", "nz"].includes(code)) continent = "Oceania";
                else if (["za", "eg", "ng", "ke", "ma"].includes(code)) continent = "Africa";
            }

            // Genera un messaggio HTML di fallback con alcune informazioni di base
            const flagUrl = getFlagUrl(country);
            const flagHtml = flagUrl ? `<img src="${flagUrl}" alt="${country} flag" class="country-flag-large">` : '';

            // Aggiungi una classe speciale per lo stile
            document.getElementById('countryInfoModal').classList.add('fallback-mode');

            return `
                <div class="country-fallback-info">
                    <div class="alert alert-warning mb-4">
                        <div class="d-flex align-items-start">
                            <i class="fas fa-exclamation-triangle fa-2x me-3 mt-1"></i>
                            <div>
                                <h5 class="mb-1">Servizio temporaneamente non disponibile</h5>
                                <p class="mb-1">Il servizio informativo di Geografia4Geek ha raggiunto il limite di richieste API giornaliere. Stiamo mostrando informazioni di base su ${country}.</p>
                                <p class="mb-0"><small>Dettaglio tecnico: ${error.message}</small></p>
                            </div>
                        </div>
                    </div>

                    <div class="country-header mb-4">
                        ${flagHtml}
                        <h2 class="country-name">${country}</h2>
                        <p class="continent-name">Continente: ${continent}</p>
                    </div>

                    <div class="basic-info-section">
                        <p>Stiamo visualizzando informazioni di base su ${country} a causa di limitazioni temporanee del servizio. Per avere informazioni più dettagliate, riprova più tardi.</p>

                        <p>Puoi comunque procedere con un quiz di conoscenze generali su ${country}. Il quiz conterrà domande di geografia generale, storia e cultura del paese.</p>
                    </div>

                    <div class="quiz-ready-section">
                        <div class="quiz-icon">
                            <i class="fas fa-question-circle"></i>
                        </div>
                        <div class="quiz-text">
                            <h5>Pronto per il Quiz!</h5>
                            <p>Nonostante le limitazioni temporanee del servizio, puoi comunque affrontare un quiz di conoscenze generali su ${country}. Le domande saranno basate su geografia, cultura e storia generali.</p>
                        </div>
                    </div>
                </div>
                <style>
                    .country-fallback-info {
                        font-family: 'Segoe UI', 'Roboto', sans-serif;
                        line-height: 1.7;
                        color: #333;
                    }

                    .country-header {
                        display: flex;
                        flex-direction: column;
                        align-items: center;
                        text-align: center;
                        padding: 1.5rem;
                        background-color: #f8f9fa;
                        border-radius: 8px;
                    }

                    .country-flag-large {
                        width: 160px;
                        height: auto;
                        border: 3px solid white;
                        box-shadow: 0 4px 10px rgba(0,0,0,0.15);
                        margin-bottom: 1rem;
                    }

                    .country-name {
                        font-size: 2rem;
                        margin-bottom: 0.25rem;
                        color: #2c3e50;
                    }

                    .continent-name {
                        font-size: 1.1rem;
                        color: #6c757d;
                        margin-bottom: 0;
                    }

                    .basic-info-section {
                        margin: 1.5rem 0;
                    }
                </style>
            `;
        }

            // Trova isola piccola tramite coordinate precise
            // function findSmallIslandByCoordinates(lon, lat) {
            //     // Per efficienza, filtriamo prima i microstati/isole per area geografica approssimativa
            //     let possibleIslands = [];

            //     // Determina la regione del mondo dalla longitudine e latitudine
            //     if (lon >= -180 && lon <= -30 && lat >= 5 && lat <= 40) {
            //         // Caraibi e Nord America
            //         possibleIslands = Object.keys(smallIslandsDatabase).filter(name =>
            //             (smallIslandsDatabase[name].lon >= -180 && smallIslandsDatabase[name].lon <= -30) &&
            //             (smallIslandsDatabase[name].lat >= 5 && smallIslandsDatabase[name].lat <= 40)
            //         );
            //     } else if (lon >= -25 && lon <= 45 && lat >= -25 && lat <= 50) {
            //         // Europa e Africa
            //         possibleIslands = Object.keys(smallIslandsDatabase).filter(name =>
            //             (smallIslandsDatabase[name].lon >= -25 && smallIslandsDatabase[name].lon <= 45) &&
            //             (smallIslandsDatabase[name].lat >= -25 && smallIslandsDatabase[name].lat <= 50)
            //         );
            //     } else if (lon >= 45 && lon <= 180 && lat >= -30 && lat <= 40) {
            //         // Asia e Oceania
            //         possibleIslands = Object.keys(smallIslandsDatabase).filter(name =>
            //             (smallIslandsDatabase[name].lon >= 45 && smallIslandsDatabase[name].lon <= 180) &&
            //             (smallIslandsDatabase[name].lat >= -30 && smallIslandsDatabase[name].lat <= 40)
            //         );
            //     } else if (lon >= -180 && lon <= -30 && lat >= -30 && lat <= -5) {
            //         // Pacifico del Sud
            //         possibleIslands = Object.keys(smallIslandsDatabase).filter(name =>
            //             (smallIslandsDatabase[name].lon >= -180 && smallIslandsDatabase[name].lon <= -30) &&
            //             (smallIslandsDatabase[name].lat >= -30 && smallIslandsDatabase[name].lat <= -5)
            //         );
            //     } else {
            //         // Se non siamo sicuri, controlla tutti
            //         possibleIslands = Object.keys(smallIslandsDatabase);
            //     }

            //     // Ora controlliamo solo le isole/stati nella regione filtrata
            //     let closestIsland = null;
            //     let minDistance = Infinity;

            //     for (const islandName of possibleIslands) {
            //         const island = smallIslandsDatabase[islandName];

            //         // Calcola la distanza dalle coordinate dell'isola
            //         const latDistance = Math.abs(lat - island.lat);
            //         const lonDistance = Math.abs(lon - island.lon);
            //         const distance = Math.sqrt(latDistance * latDistance + lonDistance * lonDistance);

            //         // Soglia di approssimazione basata sulla dimensione dell'isola
            //         let threshold = 0.5; // Default threshold

            //         // Regola la soglia in base alla dimensione dell'isola
            //         if (island.zoom < 30000) threshold = 0.02;     // Stati minuscoli (Vaticano, Monaco)
            //         else if (island.zoom < 70000) threshold = 0.05; // Stati molto piccoli (San Marino)
            //         else if (island.zoom < 150000) threshold = 0.1; // Stati piccoli (Liechtenstein)
            //         else if (island.zoom < 300000) threshold = 0.2; // Isole piccole
            //         else if (island.zoom < 500000) threshold = 0.3; // Isole medie
            //         else threshold = 0.5;                          // Isole grandi o arcipelaghi

            //         // Verifica se le coordinate sono nell'isola e se è il più vicino trovato finora
            //         if (distance <= threshold && distance < minDistance) {
            //             minDistance = distance;
            //             closestIsland = islandName;
            //         }
            //     }

            //     if (closestIsland) {
            //         console.log(`Found small island/state: ${closestIsland} at distance: ${minDistance}`);
            //         return closestIsland;
            //     }

            //     return null;
            // }

            // Sistema di selezione completo per tutti i paesi e isole piccole
                    // Trova isola piccola tramite coordinate precise
        function findSmallIslandByCoordinates(lon, lat) {
            // Per efficienza, filtriamo prima i microstati/isole per area geografica approssimativa
            let possibleIslands = [];

            // Determina la regione del mondo dalla longitudine e latitudine
            if (lon >= -180 && lon <= -30 && lat >= 5 && lat <= 40) {
                // Caraibi e Nord America
                possibleIslands = Object.keys(smallIslandsDatabase).filter(name =>
                    (smallIslandsDatabase[name].lon >= -180 && smallIslandsDatabase[name].lon <= -30) &&
                    (smallIslandsDatabase[name].lat >= 5 && smallIslandsDatabase[name].lat <= 40)
                );
            } else if (lon >= -30 && lon <= 45 && lat >= 30 && lat <= 65) {
                // Europa
                possibleIslands = Object.keys(smallIslandsDatabase).filter(name =>
                    (smallIslandsDatabase[name].lon >= -30 && smallIslandsDatabase[name].lon <= 45) &&
                    (smallIslandsDatabase[name].lat >= 30 && smallIslandsDatabase[name].lat <= 65)
                );
            } else if (lon >= -30 && lon <= 45 && lat >= -40 && lat <= 30) {
                // Africa e Mediterraneo
                possibleIslands = Object.keys(smallIslandsDatabase).filter(name =>
                    (smallIslandsDatabase[name].lon >= -30 && smallIslandsDatabase[name].lon <= 45) &&
                    (smallIslandsDatabase[name].lat >= -40 && smallIslandsDatabase[name].lat <= 30)
                );
            } else if (lon >= 45 && lon <= 180 && lat >= 0 && lat <= 50) {
                // Asia
                possibleIslands = Object.keys(smallIslandsDatabase).filter(name =>
                    (smallIslandsDatabase[name].lon >= 45 && smallIslandsDatabase[name].lon <= 180) &&
                    (smallIslandsDatabase[name].lat >= 0 && smallIslandsDatabase[name].lat <= 50)
                );
            } else if (lon >= 45 && lon <= 180 && lat >= -40 && lat <= 0) {
                // Oceania e Sud-est asiatico
                possibleIslands = Object.keys(smallIslandsDatabase).filter(name =>
                    (smallIslandsDatabase[name].lon >= 45 && smallIslandsDatabase[name].lon <= 180) &&
                    (smallIslandsDatabase[name].lat >= -40 && smallIslandsDatabase[name].lat <= 0)
                );
            } else if (lon >= -180 && lon <= -30 && lat >= -60 && lat <= 5) {
                // Pacifico del Sud e Sudamerica
                possibleIslands = Object.keys(smallIslandsDatabase).filter(name =>
                    (smallIslandsDatabase[name].lon >= -180 && smallIslandsDatabase[name].lon <= -30) &&
                    (smallIslandsDatabase[name].lat >= -60 && smallIslandsDatabase[name].lat <= 5)
                );
            } else if (lat <= -60 || lat >= 75) {
                // Regioni polari (Antartide, Artico)
                possibleIslands = Object.keys(smallIslandsDatabase).filter(name =>
                    (smallIslandsDatabase[name].lat <= -60) || (smallIslandsDatabase[name].lat >= 75)
                );
            } else {
                // Se non siamo sicuri, controlla tutti
                possibleIslands = Object.keys(smallIslandsDatabase);
            }

            console.log(`Checking ${possibleIslands.length} possible islands/microstates in region for coordinates: lon=${lon.toFixed(4)}, lat=${lat.toFixed(4)}`);

            // Ora controlliamo solo le isole/stati nella regione filtrata
            let closestIsland = null;
            let minDistance = Infinity;

            for (const islandName of possibleIslands) {
                const island = smallIslandsDatabase[islandName];

                // Calcola la distanza dalle coordinate dell'isola
                const latDistance = Math.abs(lat - island.lat);
                const lonDistance = Math.abs(lon - island.lon);
                const distance = Math.sqrt(latDistance * latDistance + lonDistance * lonDistance);

                // Soglia di approssimazione basata sulla dimensione dell'isola
                let threshold = 0.5; // Default threshold

                // Regola la soglia in base alla dimensione dell'isola (zoom più piccolo = isola più piccola)
                if (island.zoom < 30000) threshold = 0.03;     // Stati minuscoli (Vaticano, Monaco)
                else if (island.zoom < 70000) threshold = 0.06; // Stati molto piccoli (San Marino)
                else if (island.zoom < 150000) threshold = 0.12; // Stati piccoli (Liechtenstein)
                else if (island.zoom < 300000) threshold = 0.25; // Isole piccole
                else if (island.zoom < 500000) threshold = 0.35; // Isole medie
                else threshold = 0.5;                          // Isole grandi o arcipelaghi

                // Verifica se le coordinate sono nell'isola e se è il più vicino trovato finora
                if (distance <= threshold && distance < minDistance) {
                    minDistance = distance;
                    closestIsland = islandName;
                }
            }

            if (closestIsland) {
                console.log(`Found small island/state: ${closestIsland} at distance: ${minDistance.toFixed(4)}`);
                return closestIsland;
            }

            return null;
        }
                // Funzione migliorata per spostare la camera su una località specifica
        function focusOnLocation(lon, lat, isSmallIsland = false) {
            if (!globe) return;

            // Interrompi eventuali animazioni in corso
            if (currentAnimation) {
                cancelAnimationFrame(currentAnimation);
                currentAnimation = null;
            }

            // Converti coordinate geografiche in coordinate 3D
            const phi = (90 - lat) * (Math.PI / 180);
            const theta = (lon + 180) * (Math.PI / 180);

            // Calcolo della posizione 3D sulla superficie del globo
            const x = -radius * Math.sin(phi) * Math.cos(theta);
            const y = radius * Math.cos(phi);
            const z = radius * Math.sin(phi) * Math.sin(theta);

            const target = new THREE.Vector3(x, y, z);

            // Calcola la posizione della camera per avere un'ottima vista del punto
            const targetPosition = target.clone().normalize();

            // Calcolo zoom appropriato in base al tipo di locazione
            let zoomDistance;

            if (isSmallIsland) {
                // Per microstati e piccole isole, usiamo lo zoom dal database
                const country = isSmallIsland; // isSmallIsland contiene il nome del microstato
                const zoomLevel = smallIslandsDatabase[country]?.zoom || 100000;

                // Convertiamo lo zoom in una distanza appropriata per la camera
                // La formula è calibrata per dare un buon risultato visivo a tutti i livelli di zoom
                zoomDistance = radius * (1 + (750000 / zoomLevel));

                // Console log per debug
                console.log(`Focusing on ${country} with zoom level: ${zoomLevel}, distance: ${zoomDistance}`);
            } else {
                // Per paesi normali, usa la distanza standard
                zoomDistance = radius * 1.8;
            }

            // Posizione finale della camera
            const cameraTargetPosition = targetPosition.multiplyScalar(zoomDistance);

            // Preparazione dell'animazione
            const startPosition = camera.position.clone();
            const startQuaternion = camera.quaternion.clone();

            // Crea un quaternione che orienta la camera verso il target
            const endQuaternion = new THREE.Quaternion();
            const m = new THREE.Matrix4();
            m.lookAt(cameraTargetPosition, new THREE.Vector3(0, 0, 0), camera.up);
            endQuaternion.setFromRotationMatrix(m);

            // Velocità dell'animazione - più lenta per microstati per evitare disorientamento
            const animationDuration = isSmallIsland ? 1800 : 1200; // millisecondi
            const startTime = Date.now();

            // Funzione di animazione
            function animate() {
                const elapsedTime = Date.now() - startTime;
                const progress = Math.min(elapsedTime / animationDuration, 1);

                // Funzione di easing per un movimento più naturale
                const ease = function(t) {
                    return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
                };

                const easedProgress = ease(progress);

                // Interpolazione della posizione
                camera.position.lerpVectors(startPosition, cameraTargetPosition, easedProgress);

                // Interpolazione dell'orientamento
                THREE.Quaternion.slerp(startQuaternion, endQuaternion, camera.quaternion, easedProgress);

                // Aggiorna i controlli orbitali
                controls.update();

                // Continua l'animazione se non è completa
                if (progress < 1) {
                    currentAnimation = requestAnimationFrame(animate);
                } else {
                    // Animazione completata
                    currentAnimation = null;

                    // Aggiorna i limiti dei controlli orbitali per microstati
                    if (isSmallIsland) {
                        // Limita lo zoom verso l'esterno per evitare che l'utente si "perda"
                        const maxZoom = zoomDistance * 2.5;
                        const minZoom = zoomDistance * 0.6; // Consenti uno zoom più ravvicinato per vedere i dettagli

                        controls.minDistance = minZoom;
                        controls.maxDistance = maxZoom;

                        // Rendere i controlli più sensibili per microstati
                        controls.rotateSpeed = 0.8;
                        controls.zoomSpeed = 0.8;
                    } else {
                        // Ripristina i controlli standard per paesi normali
                        controls.minDistance = radius * 1.1;
                        controls.maxDistance = radius * 4;
                        controls.rotateSpeed = 0.5;
                        controls.zoomSpeed = 0.5;
                    }
                }

                renderer.render(scene, camera);
            }

            // Avvia l'animazione
            currentAnimation = requestAnimationFrame(animate);

            // Aggiorna il contesto di selezione
            currentSelectedLocation = { lon, lat };
        }

        // Funzione migliorata per gestire il click sul globo
        function handleGlobeClick(event) {
            event.preventDefault();

            // Calcola le coordinate del mouse normalizzate
            const mouse = new THREE.Vector2();
            const bounds = globeCanvas.getBoundingClientRect();

            mouse.x = ((event.clientX - bounds.left) / bounds.width) * 2 - 1;
            mouse.y = -((event.clientY - bounds.top) / bounds.height) * 2 + 1;

            // Imposta il raycaster
            raycaster.setFromCamera(mouse, camera);

            // Interseca con il globo
            const intersects = raycaster.intersectObject(globe);

            if (intersects.length > 0) {
                // Ottieni il punto di intersezione
                const intersectionPoint = intersects[0].point.clone();

                // Converti in coordinate geografiche
                const vertex = intersectionPoint.clone().normalize();

                const lat = 90 - (Math.acos(vertex.y) * 180 / Math.PI);
                const lon = (Math.atan2(vertex.z, vertex.x) * 180 / Math.PI) - 180;

                console.log(`Clicked on: lat=${lat.toFixed(4)}, lon=${lon.toFixed(4)}`);

                // Cerca prima tra le piccole isole/microstati
                const smallIsland = findSmallIslandByCoordinates(lon, lat);

                if (smallIsland) {
                    console.log(`Found small island: ${smallIsland}`);
                    selectedCountry = smallIsland;

                    // Visualizza il nome del paese
                    displaySelectedCountry(smallIsland);

                    // Focus sull'isola con parametri speciali
                    focusOnLocation(
                        smallIslandsDatabase[smallIsland].lon,
                        smallIslandsDatabase[smallIsland].lat,
                        smallIsland
                    );

                    return;
                }

                // Se non è un'isola piccola, cerca tra i paesi standard
                const countryName = findCountryByCoordinates(lon, lat);

                if (countryName) {
                    console.log(`Found country: ${countryName}`);
                    selectedCountry = countryName;

                    // Visualizza il nome del paese
                    displaySelectedCountry(countryName);

                    // Focus sul paese
                    focusOnLocation(lon, lat);

                    return;
                }

                // Se siamo qui, non abbiamo trovato alcun paese
                console.log("No country found at this location");
                clearSelectedCountry();
            }
        }

        // Funzione migliorata per trovare un'isola piccola
        function findSmallIslandByCoordinates(lon, lat) {
            // Per efficienza, filtriamo prima i microstati/isole per area geografica approssimativa
            let possibleIslands = [];

            // Determina la regione del mondo dalla longitudine e latitudine
            if (lon >= -180 && lon <= -30 && lat >= 5 && lat <= 40) {
                // Caraibi e Nord America
                possibleIslands = Object.keys(smallIslandsDatabase).filter(name =>
                    (smallIslandsDatabase[name].lon >= -180 && smallIslandsDatabase[name].lon <= -30) &&
                    (smallIslandsDatabase[name].lat >= 5 && smallIslandsDatabase[name].lat <= 40)
                );
            } else if (lon >= -30 && lon <= 45 && lat >= 30 && lat <= 65) {
                // Europa
                possibleIslands = Object.keys(smallIslandsDatabase).filter(name =>
                    (smallIslandsDatabase[name].lon >= -30 && smallIslandsDatabase[name].lon <= 45) &&
                    (smallIslandsDatabase[name].lat >= 30 && smallIslandsDatabase[name].lat <= 65)
                );
            } else if (lon >= -30 && lon <= 45 && lat >= -40 && lat <= 30) {
                // Africa e Mediterraneo
                possibleIslands = Object.keys(smallIslandsDatabase).filter(name =>
                    (smallIslandsDatabase[name].lon >= -30 && smallIslandsDatabase[name].lon <= 45) &&
                    (smallIslandsDatabase[name].lat >= -40 && smallIslandsDatabase[name].lat <= 30)
                );
            } else if (lon >= 45 && lon <= 180 && lat >= 0 && lat <= 50) {
                // Asia
                possibleIslands = Object.keys(smallIslandsDatabase).filter(name =>
                    (smallIslandsDatabase[name].lon >= 45 && smallIslandsDatabase[name].lon <= 180) &&
                    (smallIslandsDatabase[name].lat >= 0 && smallIslandsDatabase[name].lat <= 50)
                );
            } else if (lon >= 45 && lon <= 180 && lat >= -40 && lat <= 0) {
                // Oceania e Sud-est asiatico
                possibleIslands = Object.keys(smallIslandsDatabase).filter(name =>
                    (smallIslandsDatabase[name].lon >= 45 && smallIslandsDatabase[name].lon <= 180) &&
                    (smallIslandsDatabase[name].lat >= -40 && smallIslandsDatabase[name].lat <= 0)
                );
            } else if (lon >= -180 && lon <= -30 && lat >= -60 && lat <= 5) {
                // Pacifico del Sud e Sudamerica
                possibleIslands = Object.keys(smallIslandsDatabase).filter(name =>
                    (smallIslandsDatabase[name].lon >= -180 && smallIslandsDatabase[name].lon <= -30) &&
                    (smallIslandsDatabase[name].lat >= -60 && smallIslandsDatabase[name].lat <= 5)
                );
            } else if (lat <= -60 || lat >= 75) {
                // Regioni polari (Antartide, Artico)
                possibleIslands = Object.keys(smallIslandsDatabase).filter(name =>
                    (smallIslandsDatabase[name].lat <= -60) || (smallIslandsDatabase[name].lat >= 75)
                );
            } else {
                // Se non siamo sicuri, controlla tutti
                possibleIslands = Object.keys(smallIslandsDatabase);
            }

            console.log(`Checking ${possibleIslands.length} possible islands/microstates in region for coordinates: lon=${lon.toFixed(4)}, lat=${lat.toFixed(4)}`);

            // Ora controlliamo solo le isole/stati nella regione filtrata
            let closestIsland = null;
            let minDistance = Infinity;

            for (const islandName of possibleIslands) {
                const island = smallIslandsDatabase[islandName];

                // Calcola la distanza dalle coordinate dell'isola
                const latDistance = Math.abs(lat - island.lat);
                const lonDistance = Math.abs(lon - island.lon);
                const distance = Math.sqrt(latDistance * latDistance + lonDistance * lonDistance);

                // Soglia di approssimazione basata sulla dimensione dell'isola
                let threshold = 0.5; // Default threshold

                // Regola la soglia in base alla dimensione dell'isola (zoom più piccolo = isola più piccola)
                if (island.zoom < 30000) threshold = 0.03;     // Stati minuscoli (Vaticano, Monaco)
                else if (island.zoom < 70000) threshold = 0.06; // Stati molto piccoli (San Marino)
                else if (island.zoom < 150000) threshold = 0.12; // Stati piccoli (Liechtenstein)
                else if (island.zoom < 300000) threshold = 0.25; // Isole piccole
                else if (island.zoom < 500000) threshold = 0.35; // Isole medie
                else threshold = 0.5;                          // Isole grandi o arcipelaghi

                // Verifica se le coordinate sono nell'isola e se è il più vicino trovato finora
                if (distance <= threshold && distance < minDistance) {
                    minDistance = distance;
                    closestIsland = islandName;
                }
            }

            if (closestIsland) {
                console.log(`Found small island/state: ${closestIsland} at distance: ${minDistance.toFixed(4)}`);
                return closestIsland;
            }

            return null;
        }
            function setupSelectionSystem() {
                const handler = new Cesium.ScreenSpaceEventHandler(viewer.scene.canvas);

                handler.setInputAction(function(click) {
                    try {
                        // Ferma la rotazione quando si seleziona un paese
                        globeRotationEnabled = false;
                        const rotationButton = document.querySelector('[data-rotation-toggle]');
                        if (rotationButton) rotationButton.textContent = 'Start Rotation';

                        const pickedObject = viewer.scene.pick(click.position);

                        // Ottieni le coordinate cartesiane del punto cliccato
                        const cartesian = viewer.camera.pickEllipsoid(
                            click.position,
                            viewer.scene.globe.ellipsoid
                        );

                        // Reset della selezione precedente
                        if (selectedEntity && selectedEntity.polygon) {
                            try {
                                selectedEntity.polygon.material = Cesium.Color.fromRandom({
                                    alpha: 0.2,
                                    minimumGreen: 0.2,
                                    minimumRed: 0.2,
                                    minimumBlue: 0.2
                                });

                                if (viewer.scene.mode === Cesium.SceneMode.SCENE3D) {
                                    selectedEntity.polygon.extrudedHeight = undefined;
                                }
                            } catch (e) {
                                console.error("Error resetting selection:", e);
                            }
                        }

                        // Variabili di lavoro
                        let countryName = null;
                        let countryEntity = null;

                        // METODO 1: Picking diretto - il più affidabile quando funziona
                        if (Cesium.defined(pickedObject) && pickedObject.id && pickedObject.id.polygon) {
                            countryEntity = pickedObject.id;

                            // Estrai il nome del paese
                            if (countryEntity.name) {
                                countryName = countryEntity.name;
                            } else if (countryEntity.properties) {
                                // Cerca proprietà con il nome del paese
                                const props = countryEntity.properties;
                                const nameProperty = props.name || props.NAME || props.Name ||
                                                   props.ADMIN || props.admin;

                                if (nameProperty && nameProperty._value) {
                                    countryName = nameProperty._value;
                                }
                            }
                        }

                        // METODO 2: Coordinate precise per piccole isole
                        if (cartesian && (!countryName || countryName === "Ocean or Unidentified Region")) {
                            const cartographic = Cesium.Cartographic.fromCartesian(cartesian);
                            const longitude = Cesium.Math.toDegrees(cartographic.longitude);
                            const latitude = Cesium.Math.toDegrees(cartographic.latitude);

                            // DEBUG: Mostra coordinate nei log
                            console.log(`Click coordinates: lon=${longitude.toFixed(6)}, lat=${latitude.toFixed(6)}`);

                            // Primo controlla se è una piccola isola
                            countryName = findSmallIslandByCoordinates(longitude, latitude);

                            // Se non è una piccola isola, prova con i poligoni GeoJSON
                            if (!countryName && countriesGeoJson) {
                                countryName = findCountryFromGeoJson(longitude, latitude);
                            }

                            // Se abbiamo trovato il nome ma non l'entità, cerca l'entità
                            if (countryName && !countryEntity && countriesDataSource) {
                                const entities = countriesDataSource.entities.values;
                                for (let i = 0; i < entities.length; i++) {
                                    if (entities[i].name === countryName) {
                                        countryEntity = entities[i];
                                        break;
                                    }
                                }
                            }
                        }

                        // APPLICA SELEZIONE - Se abbiamo trovato un paese
                        if (countryName) {
                            // Imposta l'entità corrente
                            selectedEntity = countryEntity;

                            // Evidenzia il paese sulla mappa se possibile
                            if (countryEntity && countryEntity.polygon) {
                                countryEntity.polygon.material = Cesium.Color.YELLOW.withAlpha(0.4);

                                // Estrusione solo in 3D
                                if (viewer.scene.mode === Cesium.SceneMode.SCENE3D) {
                                    countryEntity.polygon.extrudedHeight = 100000;
                                }

                                // Zoom al paese
                                viewer.flyTo(countryEntity, {
                                    duration: 1.5,
                                    offset: new Cesium.HeadingPitchRange(0, Cesium.Math.toRadians(-45), 0)
                                });
                            }
                            // Zoom alle coordinate per piccole isole senza entità
                            else if (cartesian) {
                                const cartographic = Cesium.Cartographic.fromCartesian(cartesian);
                                const longitude = Cesium.Math.toDegrees(cartographic.longitude);
                                const latitude = Cesium.Math.toDegrees(cartographic.latitude);

                                // Se è nel database delle isole piccole, usa zoom personalizzato
                                if (smallIslandsDatabase[countryName]) {
                                    const island = smallIslandsDatabase[countryName];
                                    viewer.camera.flyTo({
                                        destination: Cesium.Cartesian3.fromDegrees(
                                            island.lon,
                                            island.lat,
                                            island.zoom
                                        ),
                                        orientation: {
                                            heading: 0.0,
                                            pitch: -Cesium.Math.PI_OVER_FOUR,
                                            roll: 0.0
                                        },
                                        duration: 1.5
                                    });
                                } else {
                                    // Zoom standard
                                    viewer.camera.flyTo({
                                        destination: Cesium.Cartesian3.fromDegrees(
                                            longitude,
                                            latitude,
                                            1000000
                                        ),
                                        orientation: {
                                            heading: 0.0,
                                            pitch: -Cesium.Math.PI_OVER_FOUR,
                                            roll: 0.0
                                        },
                                        duration: 1.5
                                    });
                                }
                            }

                            // Aggiorna le informazioni del paese
                            updateCountryInfo(countryName);
                        } else {
                            selectedEntity = null;
                            updateCountryInfo(null);
                        }
                    } catch (error) {
                        console.error("Error handling click:", error);
                    }
                }, Cesium.ScreenSpaceEventType.LEFT_CLICK);

                // Hover per mostrare nomi paesi
                handler.setInputAction(function(movement) {
                    try {
                        const pickedObject = viewer.scene.pick(movement.endPosition);

                        if (Cesium.defined(pickedObject) && pickedObject.id && pickedObject.id.polygon) {
                            const entity = pickedObject.id;
                            let countryName = entity.name;

                            // Se non ha nome, prova a estrarlo dalle proprietà
                            if (!countryName && entity.properties) {
                                const props = entity.properties;
                                const nameProperty = props.name || props.NAME || props.ADMIN;

                                if (nameProperty && nameProperty._value) {
                                    countryName = nameProperty._value;
                                }
                            }

                            if (countryName) {
                                // Aggiorna l'etichetta country con il nome e la bandiera
                                updateCountryLabel(countryName);
                            } else {
                                countryLabelElement.style.display = 'none';
                            }
                        } else {
                            countryLabelElement.style.display = 'none';
                        }
                    } catch (error) {
                        // Ignora errori di hover
                    }
                }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);
            }

            // Trova paese dal GeoJSON tramite coordinate
            function findCountryFromGeoJson(lon, lat) {
                try {
                    if (!countriesGeoJson || !countriesGeoJson.features) {
                        return null;
                    }

                    for (let i = 0; i < countriesGeoJson.features.length; i++) {
                        const feature = countriesGeoJson.features[i];

                        if (feature.geometry &&
                            (feature.geometry.type === 'Polygon' || feature.geometry.type === 'MultiPolygon')) {

                            if (pointInPolygon([lon, lat], feature)) {
                                return feature.properties.name;
                            }
                        }
                    }

                    return null;
                } catch (e) {
                    console.error("Error in GeoJSON search:", e);
                    return null;
                }
            }

            // Verifica se un punto è in un poligono GeoJSON
            function pointInPolygon(point, feature) {
                try {
                    const geometry = feature.geometry;

                    if (geometry.type === 'Polygon') {
                        return isPointInSinglePolygon(point, geometry.coordinates[0]);
                    }
                    else if (geometry.type === 'MultiPolygon') {
                        for (let i = 0; i < geometry.coordinates.length; i++) {
                            if (isPointInSinglePolygon(point, geometry.coordinates[i][0])) {
                                return true;
                            }
                        }
                    }

                    return false;
                } catch (e) {
                    return false;
                }
            }

            // Ray-casting algorithm per punto in poligono
            function isPointInSinglePolygon(point, polygon) {
                const [x, y] = point;
                let inside = false;

                for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
                    const [xi, yi] = polygon[i];
                    const [xj, yj] = polygon[j];

                    const intersect = ((yi > y) !== (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);
                    if (intersect) inside = !inside;
                }

                return inside;
            }

            // Imposta la vista iniziale del globo - VERSIONE DEFINITIVA
            function setInitialView(immediate = false) {
                if (!viewer) return;

                // Se c'è una vista specificata dal "comando Home"
                if (viewer.homeButton && viewer.homeButton.viewModel && viewer.homeButton.viewModel.command) {
                    try {
                        // Esegui il comando Home direttamente
                        console.log("Executing home command directly");
                        viewer.homeButton.viewModel.command();
                        return;
                    } catch (e) {
                        console.warn("Failed to execute home command:", e);
                    }
                }

                // Fallback: imposta la vista manualmente
                console.log("Setting initial view manually");
                if (immediate) {
                    // Imposta immediatamente la vista
                    viewer.camera.setView(defaultView);
                } else {
                    // Animazione fluida verso la vista
                    viewer.camera.flyTo({
                        destination: defaultView.destination,
                        orientation: defaultView.orientation,
                        duration: 0.0 // Senza animazione
                    });
                }

                // Assicurati che la rotazione funzioni attorno all'origine
                viewer.camera.lookAtTransform(Cesium.Matrix4.IDENTITY);

                // Forza il rendering
                viewer.scene.requestRender();
            }

            // Funzione per creare un pulsante personalizzato
            function createCustomButton(text, onClick, id = null) {
                const button = document.createElement('button');
                button.textContent = text;
                button.className = 'cesium-custom-button';
                if (id) button.id = id;
                button.addEventListener('click', onClick);
                return button;
            }

            // Funzione per impostare la rotazione automatica del globo
            function setupGlobeRotation() {
                if (!viewer) return;

                // Velocità di rotazione (in radianti al secondo)
                const rotationSpeed = 0.05;

                // Aggiungi un postRender event per ruotare la telecamera
                viewer.clock.onTick.addEventListener(function() {
                    if (globeRotationEnabled && viewer.scene.mode === Cesium.SceneMode.SCENE3D) {
                        // Ottieni la posizione e l'orientamento correnti della telecamera
                        const camera = viewer.camera;
                        // Ruota la camera attorno all'asse Z
                        camera.rotate(Cesium.Cartesian3.UNIT_Z, -rotationSpeed / 60.0);
                    }
                });

                // Aggiungi un pulsante per controllare la rotazione
                const rotationButton = createCustomButton(
                    'Stop Rotation',
                    function() {
                        globeRotationEnabled = !globeRotationEnabled;
                        this.textContent = globeRotationEnabled ? 'Stop Rotation' : 'Start Rotation';
                        if (globeRotationEnabled) {
                            viewer.scene.requestRender();
                        }
                    },
                    'rotationButton'
                );
                rotationButton.setAttribute('data-rotation-toggle', 'true');

                return rotationButton;
            }

            // Sostituisci/aggiorna la funzione setupStartQuizButton nel file Globe/Index.cshtml
                     function setupStartQuizButton() {
                const startQuizButton = document.getElementById('startQuizButton');
                if (startQuizButton) {
                    startQuizButton.addEventListener('click', function() {
                        if (currentCountryName) {
                            // Mostra la modale per selezionare il numero di domande
                            document.getElementById('countryInfoModalBody').innerHTML = `
                                <div class="quiz-options-container p-4">
                                    <h4 class="mb-4 text-center">Quiz su ${currentCountryName}</h4>

                                    <p class="text-muted text-center mb-4">
                                        Seleziona il numero di domande per il tuo quiz.
                                        Le domande saranno generate in base alle informazioni su ${currentCountryName}.
                                    </p>

                                    <div class="question-count-selector d-flex justify-content-center gap-3 mb-5">
                                        ${[5, 10, 15, 20].map(count => `
                                            <div class="question-count-option ${count === 10 ? 'selected' : ''}" data-count="${count}">
                                                <div class="question-count-circle">
                                                    <span class="question-count-number">${count}</span>
                                                </div>
                                                <span class="question-count-label">domande</span>
                                            </div>
                                        `).join('')}
                                    </div>

                                    <div class="difficulty-selector mb-4">
                                        <p class="text-center mb-2">Difficoltà:</p>
                                        <div class="btn-group d-flex" role="group">
                                            <input type="radio" class="btn-check" name="difficulty" id="difficulty-easy" value="easy" autocomplete="off">
                                            <label class="btn btn-outline-success" for="difficulty-easy">Facile</label>

                                            <input type="radio" class="btn-check" name="difficulty" id="difficulty-medium" value="medium" autocomplete="off" checked>
                                            <label class="btn btn-outline-primary" for="difficulty-medium">Media</label>

                                            <input type="radio" class="btn-check" name="difficulty" id="difficulty-hard" value="hard" autocomplete="off">
                                            <label class="btn btn-outline-danger" for="difficulty-hard">Difficile</label>
                                        </div>
                                    </div>

                                    <div class="text-center">
                                        <button id="generateQuizButton" class="btn btn-primary btn-lg px-4">
                                            <i class="fas fa-play me-2"></i>Genera Quiz
                                        </button>
                                    </div>
                                </div>
                            `;

                            // Aggiungi listener ai selettori di numero domande
                            document.querySelectorAll('.question-count-option').forEach(option => {
                                option.addEventListener('click', function() {
                                    // Rimuovi la selezione precedente
                                    document.querySelectorAll('.question-count-option').forEach(opt => {
                                        opt.classList.remove('selected');
                                    });
                                    // Aggiungi la selezione al nuovo elemento
                                    this.classList.add('selected');

                                    // Debug - mostra la selezione corrente
                                    console.log("Numero domande selezionato:", this.getAttribute('data-count'));
                                });
                            });

                            // Aggiungi listener di debug ai radio button della difficoltà
                            document.querySelectorAll('input[name="difficulty"]').forEach(radio => {
                                radio.addEventListener('change', function() {
                                    console.log("Difficoltà selezionata:", this.value);
                                });
                            });

                            // Aggiungi listener al pulsante di generazione
        document.getElementById('generateQuizButton').addEventListener('click', async function() {
              // Ottieni il numero di domande selezionato
              const selectedOption = document.querySelector('.question-count-option.selected');
              const questionCount = selectedOption ? parseInt(selectedOption.getAttribute('data-count')) : 10;

              // Ottieni la difficoltà selezionata
              const difficulty = document.querySelector('input[name="difficulty"]:checked').value;

              // Debug - verifica i valori prima dell'invio
              console.log("PARAMETRI QUIZ SELEZIONATI:");
              console.log("- Paese:", currentCountryName);
              console.log("- Numero domande:", questionCount);
              console.log("- Difficoltà:", difficulty);

              // Cambia il pulsante per mostrare il caricamento
              this.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Generazione quiz...';
              this.disabled = true;

              // Mostra messaggio di caricamento
              document.getElementById('countryInfoModalBody').innerHTML = `
                  <div class="text-center py-5">
                      <div class="spinner-grow text-primary mb-3" role="status" style="width: 3rem; height: 3rem;"></div>
                      <h4 class="mb-3">Creazione quiz in corso...</h4>
                      <p class="mb-2">Stiamo generando un quiz di ${questionCount} domande su ${currentCountryName}.</p>
                      <p class="text-muted">Questo potrebbe richiedere alcuni secondi.</p>
                      <div class="progress mt-4" style="height: 10px;">
                          <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%"></div>
                      </div>
                  </div>
              `;

              // Simula progresso
              const progressBar = document.querySelector('.progress-bar');
              let progress = 0;
              const progressInterval = setInterval(() => {
                  progress += 5;
                  if (progress > 90) clearInterval(progressInterval);
                  progressBar.style.width = `${Math.min(progress, 90)}%`;
              }, 300);

              try {
                  // Prepara i dati da inviare all'API - IMPORTANTE: nomi dei parametri con maiuscole iniziali
                  const quizParams = {
                      CountryName: currentCountryName,
                      QuestionCount: questionCount,
                      Difficulty: difficulty
                  };

                  // Debug - mostra i dati che stiamo per inviare
                  console.log("Invio parametri al server:", JSON.stringify(quizParams));

                  // Chiama l'API per generare il quiz
                  const response = await fetch('/api/Quiz/generate', {
                      method: 'POST',
                      headers: {
                          'Content-Type': 'application/json'
                      },
                      body: JSON.stringify(quizParams)
                  });

                  // Verifica se la risposta è OK
                  if (!response.ok) {
                      throw new Error(`Errore API: ${response.status} ${response.statusText}`);
                  }

                  const data = await response.json();
                  clearInterval(progressInterval);

                  if (data.success) {
                      console.log(`Quiz generato con successo: ${data.quiz.questions.length} domande`);
                      progressBar.style.width = '100%';

                      // MODIFICA QUI: Aggiungi i parametri questionCount e difficulty all'URL
                      const quizUrl = `/Quiz?country=${encodeURIComponent(currentCountryName)}&questionCount=${questionCount}&difficulty=${difficulty}`;
                      console.log("Reindirizzamento a URL:", quizUrl);

                      // Breve pausa per mostrare il 100% prima di reindirizzare
                      setTimeout(() => {
                          // Reindirizza alla pagina del quiz con tutti i parametri
                          window.location.href = quizUrl;
                      }, 500);
                  } else {
                      throw new Error(data.message || "Errore nella generazione del quiz");
                  }
              } catch (error) {
                  clearInterval(progressInterval);
                  console.error("Errore nella generazione del quiz:", error);
                  document.getElementById('countryInfoModalBody').innerHTML = `
                      <div class="alert alert-danger">
                          <h5><i class="fas fa-exclamation-triangle me-2"></i>Errore nella generazione del quiz</h5>
                          <p>Non è stato possibile creare un quiz per ${currentCountryName}.</p>
                          <p><small>Dettaglio: ${error.message}</small></p>
                          <button class="btn btn-outline-danger mt-2" onclick="window.location.reload()">Riprova</button>
                      </div>
                  `;
              }
          });
                        }
                    });
                }
            }

          document.addEventListener('DOMContentLoaded', function() {
    console.log("Inizializzazione eventi click per quiz");
    
    // DEBUG: Verifica che i radio button esistano
    console.log("Radio buttons trovati:", {
        questionCount: document.querySelectorAll('input[name="questionCount"]').length,
        difficulty: document.querySelectorAll('input[name="difficulty"]').length
    });
    
    // Aggiungi eventi click a TUTTI i possibili elementi che potrebbero aprire un quiz
    const quizLinkSelectors = [
        '.quiz-link', 
        '.country-quiz-btn', 
        '[data-action="quiz"]',
        '.country-item',
        'a[href*="Quiz?country="]'
    ];
    
    const quizLinks = document.querySelectorAll(quizLinkSelectors.join(', '));
    console.log(`Trovati ${quizLinks.length} link ai quiz`);
    
    quizLinks.forEach(link => {
        // Rimuovi eventuali listener precedenti
        const newLink = link.cloneNode(true);
        link.parentNode.replaceChild(newLink, link);
        
        newLink.addEventListener('click', function(e) {
            e.preventDefault();
            
            // Ottieni i valori dai radio button
            let questionCount = "5";
            let difficulty = "medium";
            
            const questionRadio = document.querySelector('input[name="questionCount"]:checked');
            if (questionRadio) {
                questionCount = questionRadio.value;
                console.log("Numero domande selezionato:", questionCount);
            } else {
                console.warn("Nessun radio button per questionCount trovato o selezionato");
            }
            
            const difficultyRadio = document.querySelector('input[name="difficulty"]:checked');
            if (difficultyRadio) {
                difficulty = difficultyRadio.value;
                console.log("Difficoltà selezionata:", difficulty);
            } else {
                console.warn("Nessun radio button per difficulty trovato o selezionato");
            }
            
            // Ottieni il paese dall'elemento corrente
            let country = null;
            
            // Prova tutti i possibili attributi che potrebbero contenere il paese
            const possibleAttrs = ['data-country', 'data-value', 'data-name'];
            for (let attr of possibleAttrs) {
                if (this.hasAttribute(attr)) {
                    country = this.getAttribute(attr);
                    break;
                }
            }
            
            // Se non trovato negli attributi, prova a estrarlo dall'href
            if (!country && this.hasAttribute('href')) {
                const href = this.getAttribute('href');
                const match = href.match(/country=([^&]+)/);
                if (match) {
                    country = decodeURIComponent(match[1]);
                }
            }
            
            // Se ancora non trovato, cerca un elemento figlio che potrebbe contenere il paese
            if (!country) {
                const countryElement = this.querySelector('[data-country]');
                if (countryElement) {
                    country = countryElement.getAttribute('data-country');
                }
            }
            
            if (country) {
                console.log(`Navigazione al quiz: paese=${country}, domande=${questionCount}, difficoltà=${difficulty}`);
                
                // Costruisci URL con parametri
                const url = `/Quiz?country=${encodeURIComponent(country)}&questionCount=${questionCount}&difficulty=${difficulty}`;
                
                // Naviga alla pagina del quiz
                window.location.href = url;
            } else {
                console.error("Impossibile determinare il paese per il quiz");
            }
        });
    });
});
            // Cerca la funzione che gestisce il pulsante Start Quiz
            document.getElementById('startQuizButton').addEventListener('click', function() {
                if (currentCountryName) {
                    // Mostra la modale per selezionare il numero di domande
                    document.getElementById('countryInfoModalBody').innerHTML = `
                        <div class="quiz-options-container p-4">
                            <h4 class="mb-4 text-center">Quiz su ${currentCountryName}</h4>

                            <p class="text-muted text-center mb-4">
                                Seleziona il numero di domande per il tuo quiz.
                                Le domande saranno generate in base alle informazioni su ${currentCountryName}.
                            </p>

                            <div class="question-count-selector d-flex justify-content-center gap-3 mb-5">
                                <div class="question-count-option selected" data-count="5">
                                    <div class="question-count-circle">
                                        <span class="question-count-number">5</span>
                                    </div>
                                    <span class="question-count-label">domande</span>
                                </div>
                                <div class="question-count-option" data-count="10">
                                    <div class="question-count-circle">
                                        <span class="question-count-number">10</span>
                                    </div>
                                    <span class="question-count-label">domande</span>
                                </div>
                                <div class="question-count-option" data-count="15">
                                    <div class="question-count-circle">
                                        <span class="question-count-number">15</span>
                                    </div>
                                    <span class="question-count-label">domande</span>
                                </div>
                                <div class="question-count-option" data-count="20">
                                    <div class="question-count-circle">
                                        <span class="question-count-number">20</span>
                                    </div>
                                    <span class="question-count-label">domande</span>
                                </div>
                            </div>

                            <div class="difficulty-selector mb-4">
                                <p class="text-center mb-2">Difficoltà:</p>
                                <div class="btn-group d-flex" role="group">
                                    <input type="radio" class="btn-check" name="difficulty" id="difficulty-easy" value="easy" autocomplete="off">
                                    <label class="btn btn-outline-success" for="difficulty-easy">Facile</label>

                                    <input type="radio" class="btn-check" name="difficulty" id="difficulty-medium" value="medium" autocomplete="off" checked>
                                    <label class="btn btn-outline-primary" for="difficulty-medium">Media</label>

                                    <input type="radio" class="btn-check" name="difficulty" id="difficulty-hard" value="hard" autocomplete="off">
                                    <label class="btn btn-outline-danger" for="difficulty-hard">Difficile</label>
                                </div>
                            </div>

                            <div class="text-center">
                                <button id="generateQuizButton" class="btn btn-primary btn-lg px-4">
                                    <i class="fas fa-play me-2"></i>Genera Quiz
                                </button>
                            </div>
                        </div>
                    `;

                    // Aggiungi stili per la selezione del quiz
                    const style = document.createElement('style');
                    style.textContent = `
                        .question-count-selector {
                            flex-wrap: wrap;
                        }

                        .question-count-option {
                            display: flex;
                            flex-direction: column;
                            align-items: center;
                            cursor: pointer;
                            transition: all 0.3s ease;
                            padding: 10px;
                            border-radius: 8px;
                        }

                        .question-count-option:hover {
                            background-color: #e9ecef;
                        }

                        .question-count-option.selected {
                            background-color: #e9ecef;
                        }

                        .question-count-circle {
                            width: 60px;
                            height: 60px;
                            background: linear-gradient(135deg, #3498db, #2980b9);
                            border-radius: 50%;
                            display: flex;
                            justify-content: center;
                            align-items: center;
                            margin-bottom: 8px;
                            color: white;
                            font-weight: bold;
                            box-shadow: 0 3px 6px rgba(0,0,0,0.1);
                            transition: all 0.3s ease;
                        }

                        .question-count-option:hover .question-count-circle,
                        .question-count-option.selected .question-count-circle {
                            transform: scale(1.1);
                            box-shadow: 0 5px 12px rgba(0,0,0,0.15);
                        }

                        .question-count-number {
                            font-size: 24px;
                        }

                        .question-count-label {
                            font-size: 14px;
                            color: #6c757d;
                        }
                    `;
                    document.head.appendChild(style);

                    // Aggiungi listener per la selezione del numero di domande
                    document.querySelectorAll('.question-count-option').forEach(option => {
                        option.addEventListener('click', function() {
                            // Rimuovi la selezione precedente
                            document.querySelectorAll('.question-count-option').forEach(opt => {
                                opt.classList.remove('selected');
                            });
                            // Aggiungi la selezione al nuovo elemento
                            this.classList.add('selected');
                            console.log("Numero domande selezionato:", this.getAttribute('data-count'));
                        });
                    });

                    // Aggiungi listener al pulsante di generazione
                    document.getElementById('generateQuizButton').addEventListener('click', async function() {
                               const selectedOption = document.querySelector('.question-count-option.selected');
            const questionCount = selectedOption ? parseInt(selectedOption.getAttribute('data-count')) : 5;

            // Ottieni la difficoltà selezionata
            const difficulty = document.querySelector('input[name="difficulty"]:checked').value;

            console.log("Parametri quiz:", {
                country: currentCountryName,
                questionCount: questionCount,
                difficulty: difficulty
            });

            // IMPORTANTE: Resetta il progresso del quiz precedente
            localStorage.removeItem('quizProgress');

            // Cambia il contenuto del pulsante per indicare il caricamento
            this.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Generazione quiz...';
            this.disabled = true;
                    

                        // Mostra un messaggio di caricamento nel corpo della modale
                        document.getElementById('countryInfoModalBody').innerHTML = `
                            <div class="text-center py-5">
                                <div class="spinner-grow text-primary mb-3" role="status" style="width: 3rem; height: 3rem;"></div>
                                <h4 class="mb-3">Creazione quiz in corso...</h4>
                                <p class="text-muted">Stiamo generando un quiz di ${questionCount} domande su ${currentCountryName} con difficoltà ${difficulty}.</p>
                                <p class="text-muted">Questo potrebbe richiedere alcuni secondi.</p>
                                <div class="progress mt-4" style="height: 10px;">
                                    <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%"></div>
                                </div>
                            </div>
                        `;

                        // Simula progresso
                        const progressBar = document.querySelector('.progress-bar');
                        let progress = 0;
                        const progressInterval = setInterval(() => {
                            progress += 5;
                            if (progress > 90) clearInterval(progressInterval);
                            progressBar.style.width = `${Math.min(progress, 90)}%`;
                        }, 300);

                        try {
                            // Chiama l'API per generare il quiz
                            const response = await fetch('/api/Quiz/generate', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({
                                    CountryName: currentCountryName,
                                    QuestionCount: questionCount,
                                    Difficulty: difficulty
                                })
                            });

                            const data = await response.json();
                            clearInterval(progressInterval);

                            if (data.success) {
                                console.log(`Quiz generato con successo: ${data.quiz.questions.length} domande`);
                                progressBar.style.width = '100%';

                                // Salva il quiz generato in localStorage
                              
                                // Reindirizza alla pagina del quiz dopo una breve pausa
                                setTimeout(() => {
                                    window.location.href = `/Quiz?country=${encodeURIComponent(currentCountryName)}`;
                                }, 500);
                            } else {
                                throw new Error(data.message || "Errore nella generazione del quiz");
                            }
                        } catch (error) {
                            clearInterval(progressInterval);
                            console.error("Errore nella generazione del quiz:", error);
                            document.getElementById('countryInfoModalBody').innerHTML = `
                                <div class="alert alert-danger">
                                    <h5><i class="fas fa-exclamation-triangle me-2"></i>Errore nella generazione del quiz</h5>
                                    <p>Non è stato possibile creare un quiz per ${currentCountryName}.</p>
                                    <p><small>Dettaglio: ${error.message}</small></p>
                                    <button class="btn btn-outline-danger mt-2" onclick="window.location.reload()">Riprova</button>
                                </div>
                            `;
                        }
                    });
                }
            });

            // INIZIALIZZAZIONE PRINCIPALE
            async function initCesium() {
                try {
                    Cesium.Ion.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJmYWVkNGVkMC04OGE1LTRlMmYtOGRmMS1iMmVkODY0YmEwMjciLCJpZCI6MjkxOTE5LCJpYXQiOjE3NDQ3OTUwOTR9.7byFKAjbQQUAwrcqZK4rsWF4omZqQOgEiarfmOQ5mJI';

                    updateStatus("Creating viewer...");

                    // Opzioni personalizzate per Cesium
                    const options = {
                        animation: false,
                        baseLayerPicker: false,
                        fullscreenButton: false,
                        geocoder: false,
                        homeButton: true,
                        infoBox: false,
                        sceneModePicker: true,
                        selectionIndicator: false,
                        timeline: false,
                        navigationHelpButton: false,
                        imageryProvider: new Cesium.TileMapServiceImageryProvider({
                            url: Cesium.buildModuleUrl('Assets/Textures/NaturalEarthII')
                        }),
                        terrainProvider: new Cesium.EllipsoidTerrainProvider(),
                        // Aggiunta Vista Iniziale:
                        scene3DOnly: false,
                        homeButton: {
                            // Imposta una vista personalizzata per il pulsante Home
                            controller: {
                                getDestination: function() {
                                    return defaultView.destination;
                                },
                                getOrientation: function() {
                                    return defaultView.orientation;
                                }
                            }
                        }
                    };

                    // Crea il viewer con le opzioni personalizzate
                    viewer = new Cesium.Viewer('cesiumContainer', options);

                    // Nascondi crediti e ottimizza performance
                    viewer.cesiumWidget.creditContainer.style.display = "none";
                    viewer.scene.globe.enableLighting = false;
                    viewer.scene.fog.enabled = false;
                    viewer.scene.globe.maximumScreenSpaceError = 4;
                    viewer.scene.globe.tileCacheSize = 1000;

                    // CRUCIALE: Imposta immediatamente la vista manualmente
                    viewer.scene.camera.setView({
                        destination: defaultView.destination,
                        orientation: defaultView.orientation
                    });

                    // NUOVA STRATEGIA:
                    // Sovrascrivere il comando Home per assicurarci che funzioni sempre
                    if (viewer.homeButton && viewer.homeButton.viewModel) {
                        const originalCommand = viewer.homeButton.viewModel.command;
                        viewer.homeButton.viewModel.command = function() {
                            // Esegui il comando originale
                            if (originalCommand) {
                                originalCommand();
                            }

                            // Assicurati che la vista sia corretta
                            setTimeout(() => {
                                setInitialView(true);
                            }, 10);
                        };

                        // Forza l'esecuzione del comando Home immediatamente
                        viewer.homeButton.viewModel.command();
                    }

                    // Ascoltiamo il primo rendering completato
                    viewer.scene.postRender.addEventListener(function() {
                        if (!firstRenderComplete) {
                            firstRenderComplete = true;
                            console.log("First render complete!");

                            // Imposta nuovamente la vista dopo il primo rendering
                            setTimeout(() => {
                                setInitialView(true);
                            }, 100);
                        }
                    });

                    // Crea i controlli personalizzati dopo che il viewer è pronto
                    const rotationButton = setupGlobeRotation();
                    controlsContainer.appendChild(rotationButton);

                    // Aggiungi pulsante fullscreen personalizzato
                    const fullscreenButton = createCustomButton('Fullscreen', function() {
                        const container = document.getElementById('cesiumContainer');

                        if (!document.fullscreenElement) {
                            if (container.requestFullscreen) {
                                container.requestFullscreen();
                            } else if (container.msRequestFullscreen) {
                                container.msRequestFullscreen();
                            } else if (container.mozRequestFullScreen) {
                                container.mozRequestFullScreen();
                            } else if (container.webkitRequestFullscreen) {
                                container.webkitRequestFullscreen();
                            }
                            this.textContent = 'Exit Fullscreen';
                        } else {
                            if (document.exitFullscreen) {
                                document.exitFullscreen();
                            } else if (document.msExitFullscreen) {
                                document.msExitFullscreen();
                            } else if (document.mozCancelFullScreen) {
                                document.mozCancelFullScreen();
                            } else if (document.webkitExitFullscreen) {
                                document.webkitExitFullscreen();
                            }
                            this.textContent = 'Fullscreen';
                        }
                    });
                    controlsContainer.appendChild(fullscreenButton);

                    // Gestione cambio modalità 3D/2D
                    viewer.scene.morphComplete.addEventListener(function() {
                        console.log("View mode changed to: ",
                            viewer.scene.mode === Cesium.SceneMode.SCENE3D ? "3D" : "2D");

                        if (viewer.scene.mode === Cesium.SceneMode.SCENE3D) {
                            // Quando si torna alla modalità 3D, imposta la vista iniziale
                            setInitialView(true);
                        }
                    });

                    // Aggiungi etichette
                    updateStatus("Loading map labels...");
                    try {
                        viewer.imageryLayers.addImageryProvider(
                            new Cesium.IonImageryProvider({
                                assetId: 2411391 // Bing Maps Labels
                            })
                        );
                    } catch (e) {
                        console.error("Error adding labels:", e);
                    }

                    // Carica confini paesi
                    updateStatus("Loading country boundaries...");

                    // Carica GeoJSON per controllo punto-in-poligono
                    const countriesUrl = 'https://raw.githubusercontent.com/johan/world.geo.json/master/countries.geo.json';

                    try {
                        const response = await fetch(countriesUrl);
                        countriesGeoJson = await response.json();
                    } catch (e) {
                        console.error("Error loading GeoJSON data:", e);
                    }

                    // Carica DataSource per visualizzare i confini
                    const dataSourcePromise = Cesium.GeoJsonDataSource.load(countriesUrl, {
                        stroke: Cesium.Color.WHITE.withAlpha(0.8),
                        fill: Cesium.Color.TRANSPARENT,
                        strokeWidth: 2,
                        markerSymbol: '',
                        clampToGround: true
                    });

                    dataSourcePromise.then(function(dataSource) {
                        try {
                            // Salva riferimento e aggiungi al viewer
                            countriesDataSource = dataSource;
                            viewer.dataSources.add(dataSource);

                            updateStatus("Styling countries...");

                            // Stila i paesi
                            const entities = dataSource.entities.values;

                            for (let i = 0; i < entities.length; i++) {
                                const entity = entities[i];

                                if (entity.polygon) {
                                    // Colore semitrasparente per ogni paese
                                    entity.polygon.material = Cesium.Color.fromRandom({
                                        alpha: 0.2,
                                        minimumGreen: 0.2,
                                        minimumRed: 0.2,
                                        minimumBlue: 0.2
                                    });

                                    entity.polygon.outline = true;
                                    entity.polygon.outlineColor = Cesium.Color.WHITE;

                                    // Estrai nome paese dalle proprietà
                                    if (entity.properties) {
                                        const props = entity.properties;
                                        const nameProperty = props.name || props.NAME || props.ADMIN;

                                        if (nameProperty && nameProperty._value) {
                                            entity.name = nameProperty._value;
                                        }
                                    }
                                }
                            }

                            updateStatus("Countries loaded! Click on a country to select it.");

                            // Configura sistema di selezione
                            setupSelectionSystem();

                            // Configura il pulsante Start Quiz
                            setupStartQuizButton();

                            // NASCONDERE OVERLAY - Ma solo dopo che tutto è pronto (ritarda leggermente)
                            setTimeout(() => {
                                loadingOverlay.style.display = 'none';

                                // Un ultimo tentativo di impostare correttamente la vista
                                setInitialView(true);
                            }, 500);

                        } catch (e) {
                            console.error("Error styling countries:", e);
                            loadingOverlay.style.display = 'none';
                            setupSelectionSystem(); // Try setup anyway
                        }
                    }).otherwise(function(error) {
                        console.error("Error loading boundaries:", error);
                        loadingOverlay.style.display = 'none';
                        setupSelectionSystem(); // Try setup anyway
                    });

                } catch (e) {
                    console.error('Critical initialization error:', e);
                    loadingStatus.textContent = "Could not load the 3D globe. Please try again later.";
                    loadingOverlay.style.display = 'none';
                }
            }

            // Avvia l'inizializzazione al caricamento della pagina
            document.addEventListener('DOMContentLoaded', initCesium);
        </script>
    }
